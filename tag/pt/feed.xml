<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://jaehong2.github.io//tag/pt/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://jaehong2.github.io//" rel="alternate" type="text/html" />
  <updated>2021-03-13T20:31:21+09:00</updated>
  <id>https://jaehong2.github.io//tag/pt/feed.xml</id>

  
  
  

  
    <title type="html">오늘의 공부기록 | </title>
  

  
    <subtitle>모르면 -&gt; 알때까지 -&gt; 공부해서 -&gt; 해낸다.</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">21 03 13 문자열 인코딩</title>
      <link href="https://jaehong2.github.io//pt-10-1" rel="alternate" type="text/html" title="21 03 13 문자열 인코딩" />
      <published>2021-03-11T21:03:00+09:00</published>
      <updated>2021-03-11T21:03:00+09:00</updated>
      <id>https://jaehong2.github.io//pt-10-1</id>
      <content type="html" xml:base="https://jaehong2.github.io//pt-10-1">&lt;h2 id=&quot;문자열-인코딩character-encoding-이란&quot;&gt;문자열 인코딩(Character encoding) 이란.&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;2진법을 사용하는 컴퓨터가 인간의 언어를 일정한 규칙에 따라 2진수로 변환하는 방식&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;아스키 코드&lt;/li&gt;
    &lt;li&gt;EUR-KR&lt;/li&gt;
    &lt;li&gt;UTF-8, 16, 32&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;여러 규칙 중 어느 것을 적용 하는지에 따라 &lt;br /&gt;
글자가 올바르게 표현 될 수도 있고 &lt;strong&gt;깨져서 보일 수도&lt;/strong&gt; 있다.
&lt;img src=&quot;/assets/built/images/pt/week_10/3.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림3&quot; /&gt;
깨지는 이유는??&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;컴퓨터-인코딩의-역사&quot;&gt;컴퓨터 인코딩의 역사&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_10/1.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림1&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;처음 컴퓨터가&lt;/strong&gt; 등장 할때는 &lt;strong&gt;영어, 특수문자만 지원&lt;/strong&gt; 해주었다고 한다.
그러면서 &lt;strong&gt;여러 나라로 컴퓨터가 전파&lt;/strong&gt;되면서 &lt;strong&gt;국가별로 사용하는 언어를 표현하고자&lt;/strong&gt;
독자적인 규칙을 만들었다고 한다.
그리고 모든 언어를 같은 규칙으로 표현할 수 있는 유니코드 방식이 등장했지만&lt;/p&gt;

&lt;p&gt;&lt;em&gt;모든 개발환경이 유니코드를 동일하게 처리하지 않아,&lt;/em&gt; &lt;br /&gt;
&lt;em&gt;개발자는 서로 호환되지 않는 유니코드 문자열 인코딩 방식(UTF-8, 16, 32) 중 하나를 택해야 합니다&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;그리고 한국에는 유니코드가 등장하기 전 만든 인코딩 방식(EUC-KR)을 쓰는 오래된 시스템도 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;아스키-코드ascii&quot;&gt;아스키 코드(ASCII)&lt;/h3&gt;
&lt;p&gt;아스키 코드는 (American Standard Code for Information Interchange)&lt;br /&gt;
&lt;img src=&quot;/assets/built/images/pt/week_10/2.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림2&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;처음&lt;/em&gt;으로 표준을 정립한 문자열 인코딩 방식으로 아직까지 많이 사용&lt;/li&gt;
  &lt;li&gt;대,소문자 아라비아 숫자, 공백 및 특수 문자가 있음&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;0~127&lt;/em&gt; 까지 총 128개 숫자 사용&lt;/li&gt;
  &lt;li&gt;문자하나를 표현하기위해 &lt;em&gt;1 Byte&lt;/em&gt; 사용&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;영어를 제외한 다른 언어를 표현 할 수 없다.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;eur-kr&quot;&gt;EUR-KR&lt;/h3&gt;
&lt;p&gt;EUC-KR은 한국 산업 표준으로 지정된 한국어 문자 집합&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;한글 하나를 표현하기 위해 &lt;em&gt;2 Byte&lt;/em&gt; 사용&lt;/li&gt;
  &lt;li&gt;아스키 코드는 1Byte 사용하기에 아스키 코드와 호환 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_10/4.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림4&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;빈곳을 포함해서 가로로 총 16개의 문자&lt;/li&gt;
  &lt;li&gt;가장 왼쪽에 있는 코드(B0A0, B0B0)을 기준으로 오른쪽으로 한칸 이동시 1바이트씩 더함&lt;/li&gt;
  &lt;li&gt;예를 들어 ‘가’를 표현하면 B0A1로 표현하고, B0A1는 0x&lt;strong&gt;B0&lt;/strong&gt;,0x&lt;strong&gt;A1&lt;/strong&gt;로 나뉘어 2바이트가 사용됨&lt;/li&gt;
  &lt;li&gt;완성형 코드이기 때문에 표현할 수 없는 한글 글자가 있음&lt;/li&gt;
  &lt;li&gt;실제 보여지는 문자열 길이와 컴퓨터가 할당하는 버퍼의 크기는 다를 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;유니코드&quot;&gt;유니코드&lt;/h3&gt;
&lt;p&gt;EUR-KR처럼 국가별로 독자적인 문자 집합과 인코딩 방식은&lt;br /&gt;
&lt;strong&gt;개발자 업무량 증가&lt;/strong&gt;될 것이다.&lt;br /&gt;
이런 문제를 해결하고자 국제 표준화 기구(ISO)에서 유니코드를 만들었다.&lt;/p&gt;

&lt;p&gt;유니코드 문자 집합을 표현하는 문자열 인코딩은 세가지&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;UTF-8&lt;/li&gt;
  &lt;li&gt;UTF-16&lt;/li&gt;
  &lt;li&gt;UTF-32&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;utf-8&quot;&gt;UTF-8&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;UTF-8은 &lt;em&gt;8비트(1Byte)로 인코딩&lt;/em&gt; 하는 것을 의미&lt;/li&gt;
  &lt;li&gt;표현하려는 문자에 따라 최소 1Byte ~ 6Byte까지 사용이 가능&lt;/li&gt;
  &lt;li&gt;아스키 코드와 완벽하게 호환&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_10/5.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림5&quot; /&gt;
그림에서 ‘바이트 수’ 행의 값은 문자를 표현하는데 총 바이트 크기를 나타내고&lt;br /&gt;
1 ~ 6 바이트 까지 있는 1과 0은 고정된 비트 값이며, 사용하는 바이트 수 에 따라 달라집니다.&lt;br /&gt;
‘x’ 문자는 유니코드를 저장하는데 사용되는 비트의 영역 입니다.&lt;/p&gt;

&lt;p&gt;그림에서 첫번째 줄(1Byte)에서  첫째 비트 값이 0 이므로 
0을 제외한 나머지 비트 7개로 문자를 표현합니다.&lt;br /&gt;
그래서 0~127까지의 수로 문자를 표현 할 수 있고&lt;br /&gt;
&lt;em&gt;아스키 코드와 같은 규칙&lt;/em&gt;을 가지므로 &lt;em&gt;UTF-8과 아스키 코드는 완벽하게 호환&lt;/em&gt;된다고도 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;그리고 보통 일반적인 문자는 3Byte 내로 처리가능&lt;br /&gt;
4 Byte 영역은 이모지(에모지)&lt;br /&gt;
5 Byte 부터는 고대 문자를 사용하지 않는이상 사용할일이 없습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;utf-16&quot;&gt;UTF-16&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;UTF-16은 2Byte로 인코딩하는 것을 말함&lt;/li&gt;
  &lt;li&gt;2Byte, 4Byte 만 사용 하기에 아스키 코드와 호환되지 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;유니코드에는 문자 종류에 따라 4가지로 나뉨&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;기본 다국어 평면(BMP)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;보충 다국어 평면(SMP)&lt;/li&gt;
  &lt;li&gt;상형 문자 보충 평면(SIP)&lt;/li&gt;
  &lt;li&gt;특수 목적 보충 평면(SSP)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;바이트 수는 문자가 어떤 평면에 속하는지에 따라 결정됨&lt;br /&gt;
ex) BMP같은경우 U+0000 ~ U+FFFF까지 범위에 속하는 문자가 있는데&lt;br /&gt;
이 범위에는 한글, 한자를 포함한 여러 다국어가 있고 2Byte로 인코딩 합니다.&lt;br /&gt;
정리하면 UTF-16은 일반 글자는 2Byte,&lt;br /&gt;
특별한 글자(쐐기 문자, 키프로스 음절문자 …)는 4Byte를 사용해 인코딩합니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;UTF - 8&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;오늘날 가장 많이 사용하는 문자열 인코딩&lt;/li&gt;
  &lt;li&gt;최소 1 ~ 6 Byte 사용(대부분 4Byte내로 처리)&lt;/li&gt;
  &lt;li&gt;아스키 코드와 호환 가능&lt;/li&gt;
  &lt;li&gt;JSON은 UTF-8 인코딩만 사용함, 다른 문자열은 지원하지않음&lt;/li&gt;
  &lt;li&gt;? 윈도우,자바 임베디드를 제외한 거의 모든환경에서 문자열 처리 표준&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;UTF - 16&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;자바와 윈도우는 유니코드를 사용하기 전 부터 고정된 2바이트 길이의 문자 집합 사용&lt;/li&gt;
  &lt;li&gt;2 Byte, 4 Byte 길이의 문자열 사용, 때문에 아스키와 호환이 안됨&lt;/li&gt;
  &lt;li&gt;UTF - 16기반 환경에서 UTF - 8을 사용할때는 명확한 구분이 필요함
예를들어 자바기반 웹서비스는 UTF - 16을 사용하되, 외부(DB) 통신 시 UTF-8로 변환하여 사용하는걸 추천&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;UTF - 32&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;반드시 사용해야 하는 환경이 아니라면 권장하지 않음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;EUC-KR&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;한국에서 독자적으로 사용하는 문자열 인코딩방식&lt;/li&gt;
  &lt;li&gt;고정된 2Byte 사용&lt;/li&gt;
  &lt;li&gt;가능하다면 UTF-8로 바꾸어 사용하는게 좋지만 현실적으로 어려움이 존재&lt;/li&gt;
  &lt;li&gt;국내에서 만든 서비스 중 EUC-KR을 사용하는 경우가 있을 수 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References.&lt;/h2&gt;
&lt;p&gt;[학교에서 알려주지 않는 17가지 실무 개발 기술]&lt;br /&gt;
&lt;a href=&quot;https://m.blog.naver.com/bbmobile/221360230141&quot;&gt;https://m.blog.naver.com/bbmobile/221360230141&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="pt" />
      

      
        <summary type="html">문자열 인코딩(Character encoding) 이란. 2진법을 사용하는 컴퓨터가 인간의 언어를 일정한 규칙에 따라 2진수로 변환하는 방식 아스키 코드 EUR-KR UTF-8, 16, 32</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">21 03 06 (서블릿, JSP)</title>
      <link href="https://jaehong2.github.io//pt-9-2" rel="alternate" type="text/html" title="21 03 06 (서블릿, JSP)" />
      <published>2021-03-03T23:03:00+09:00</published>
      <updated>2021-03-03T23:03:00+09:00</updated>
      <id>https://jaehong2.github.io//pt-9-2</id>
      <content type="html" xml:base="https://jaehong2.github.io//pt-9-2">&lt;h3 id=&quot;1-서블릿servlet&quot;&gt;1. 서블릿(Servlet)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;클라이언트의 요청을 처리하고, 그 결과를 반환하는  &lt;br /&gt;
Servlet 클래스의 구현 규칙을 지킨 자바 웹 프로그래밍 기술&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;서블릿의-특징&quot;&gt;서블릿의 특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트의 요청에 대해 동적으로 작동하는 웹 어플리케이션 컴포넌트&lt;/li&gt;
  &lt;li&gt;MVC 패턴에서 Controller로 이용된다.&lt;/li&gt;
  &lt;li&gt;Java Thread를 이용하여 동작한다.&lt;/li&gt;
  &lt;li&gt;HTTP 프로토콜 서비스를 지원하는 javax.servlet.http.HttpServlet 클래스를 상속받는다.&lt;/li&gt;
  &lt;li&gt;html을 사용하여 요청에 응답 할 수 있다.&lt;/li&gt;
  &lt;li&gt;HTML 변경 시 Servlet을 재컴파일해야 하는 단점이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;2서블릿-컨테이너servlet-container&quot;&gt;2.서블릿 컨테이너(Servlet Container)&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;서블릿을 관리해주는 컨테이너&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;서블릿을 만들었다고 해서 스스로작동하는 것이 아니고, &lt;strong&gt;서블릿을 제어 해주는 역할&lt;/strong&gt;이 필요한데, 
그 역할을 서블릿 컨테이너가 가짐&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;서블릿-컨테이너의-역할&quot;&gt;서블릿 컨테이너의 역할&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. 웹서버와의 통신&lt;/strong&gt;
서블릿 컨테이너는 서블릿과 웹서버가 손쉽게 통신할 수 있게 해줍니다. 일반적으로 우리는 소켓을 만들고 listen, 
accept 등을 해야하지만 서블릿 컨테이너는 이러한 기능을 API로 제공하여 복잡한 과정을 생략할 수 있게 해줍니다.
그래서 개발자가 서블릿에 구현해야 할 &lt;strong&gt;비지니스 로직에 대해서 집중 할 수있게 도와줍니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 서블릿 생명주기(Life Cycle 관리)&lt;/strong&gt;&lt;br /&gt;
서블릿의 시작과 끝을 관리합니다.
&lt;img src=&quot;/assets/built/images/pt/week_9/2-1.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림1&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;요청받음 : 클라이언트가 서비스 요청시 &lt;strong&gt;HTTP 프로토콜 기반으로 요청정보가 만들어져 웹서버&lt;/strong&gt;에 전달&lt;/li&gt;
  &lt;li&gt;웹서버에서 컨테이너 : 웹서버에서는 전달 받은 요청을 살펴보고 &lt;strong&gt;요청받은 정보가 서블릿이라면 서블릿 컨테이너&lt;/strong&gt;에게 넘김&lt;/li&gt;
  &lt;li&gt;URL 매핑 확인 : &lt;strong&gt;서블릿 매핑이 담긴 문서(web.xml or @WebServlet)를 참조&lt;/strong&gt;하여 어떤 URL과 매핑되었는지 확인하고&lt;/li&gt;
  &lt;li&gt;최초 요청 여부 판단 : 매핑된 서블릿을 실행하는데 컨테이너는 해당 &lt;strong&gt;서블릿이 메모리에 있는지 확인&lt;/strong&gt;하고&lt;/li&gt;
  &lt;li&gt;서블릿 객체 생성 : 최초의 서블릿이라면 해당 &lt;strong&gt;서블릿을 메모리에 로딩하고 서블릿 객체&lt;/strong&gt;를 생성합니다.&lt;/li&gt;
  &lt;li&gt;init() 메소드 실행 : init()은 서블릿객체가 생성된 다음에 호출되는 메소드로 서블릿객체의 &lt;strong&gt;초기화 작업&lt;/strong&gt;이 구현되있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HttpRequest,Response 객체 생성&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Service 메소드 실행 : Service 메서드는 &lt;strong&gt;HTTP 요청의 METHOD에 대응되는 메서드를 호출&lt;/strong&gt;한다.(form tag에서 method 부분)&lt;/li&gt;
  &lt;li&gt;destroy 메소드 실행 : 응답이 끝나면 HttpServletRequest, HttpServletResponse 두 객체를 &lt;strong&gt;소멸&lt;/strong&gt;시킵니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;jspjava-server-page&quot;&gt;JSP(Java Server Page)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JSP란 HTML 코드에 JAVA 코드를 넣어 동적웹페이지를 생성하는 웹어플리케이션 도구&lt;/li&gt;
  &lt;li&gt;JSP는 WAS(Web Application Server)에 의하여 서블릿 클래스로 변환하여 사용됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jsp-동작-과정&quot;&gt;JSP 동작 과정&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_9/2-3.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림3&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;클라이언트로 JSP 파일 요청이 들어오면 .java(Servlet)파일로 &lt;strong&gt;변환(Translation)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;컴파일&lt;/strong&gt;하여 .class 파일이 만들어짐&lt;/li&gt;
  &lt;li&gt;컴파일된 서블릿 클래스는 서블릿 컨테이너에 의해서 서블릿 객체로 동작.&lt;/li&gt;
  &lt;li&gt;jspInit, jspService, jspDestory 과정 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;## References.&lt;br /&gt;
&lt;a href=&quot;https://mangkyu.tistory.com/14&quot;&gt;https://mangkyu.tistory.com/14&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://hackr.io/blog/jsp-interview-questions&quot;&gt;https://hackr.io/blog/jsp-interview-questions&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://altera520.github.io/posts&quot;&gt;https://altera520.github.io/posts&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="pt" />
      

      
        <summary type="html">1. 서블릿(Servlet)</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">21 03 06</title>
      <link href="https://jaehong2.github.io//pt-9-1" rel="alternate" type="text/html" title="21 03 06" />
      <published>2021-03-03T22:03:00+09:00</published>
      <updated>2021-03-03T22:03:00+09:00</updated>
      <id>https://jaehong2.github.io//pt-9-1</id>
      <content type="html" xml:base="https://jaehong2.github.io//pt-9-1">&lt;h2 id=&quot;톰캣-버전별-차이&quot;&gt;톰캣 버전별 차이&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_9/1.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림1&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Each version of Tomcat is supported for any stable Java release 
that meets the requirements of the final column in the table above.  &lt;br /&gt;
(표에 맞는 Java Version 이상을 사용해야 안정적인 Tomcat 동작을 지원한다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;apache-tomcat-7x&quot;&gt;Apache Tomcat 7.X&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Please note that although we offer downloads and documentation of older releases,
such as Apache Tomcat 7.x, we strongly encourage users to use the latest stable version of
Apache Tomcat whenever possible.&lt;br /&gt;
(요약 : 7 버전 쓰지마세요.)&lt;br /&gt;
&lt;b&gt;개선 사항&lt;/b&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Servlet 3.0, JSP 2.2, EL 2.2 and WebSocket 1.1&lt;/strong&gt; 사양 구현&lt;/li&gt;
    &lt;li&gt;웹 응용 프로그램 메모리 누수 감지 및 예방&lt;/li&gt;
    &lt;li&gt;CSRF 보호&lt;/li&gt;
    &lt;li&gt;Manager 및 Host Manager 응용 프로그램의 향상된 보안&lt;/li&gt;
    &lt;li&gt;리팩토링 (커넥터, 라이프 사이클) 및 많은 내부 코드 정리&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;apache-tomcat-8x&quot;&gt;Apache Tomcat 8.X&lt;/h3&gt;
&lt;h4 id=&quot;80x&quot;&gt;8.0.X&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Servlet 3.1 , JSP 2.3 , EL 3.0 및 WebSocket 1.1&lt;/strong&gt; 사양 구현&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;현재 Tomcat 8.0은 8.5로 대체&lt;/strong&gt;, 8.0을 쓰고있다면 8.5로 마이그레이션 하세요!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;85x&quot;&gt;8.5.X&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Tomcat 8.0.X과 동일한 사양 지원, 또한 &lt;strong&gt;JASPIC 1.1 규격도 구현&lt;/strong&gt;한다.&lt;/li&gt;
  &lt;li&gt;HTTP/2에 대한 지원 추가(Tomcat Native 라이브러리 필요)&lt;/li&gt;
  &lt;li&gt;JSSE 커넥터(NIO 및 NIO2)에서 TLS 지원을 위한 OpenSSL 사용 지원 추가&lt;/li&gt;
  &lt;li&gt;TLS 가상 호스팅(SNI) 지원 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;85에서-제거-된-기술&quot;&gt;8.5에서 제거 된 기술&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP 및 AJP 커넥터의 BIO 구현&lt;/li&gt;
  &lt;li&gt;Comet API 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;apache-tomcat-9x&quot;&gt;Apache Tomcat 9.X&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Servlet 4.0 지원&lt;/li&gt;
  &lt;li&gt;Http / 2에 지원 추가&lt;/li&gt;
  &lt;li&gt;JSE 커넥터(NIO 및 NIO2)에서 OpenSSL을 TLS 지원용으로 사용하기 위한 지원 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;apache-tomcat-10x&quot;&gt;Apache Tomcat 10.X&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Servlet 5.0 , JSP 3.0 , EL 4.0, WebSocket 2.0, Authentication 2.0&lt;/strong&gt; 사양 구현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;## References.&lt;br /&gt;
&lt;a href=&quot;http://tomcat.apache.org/whichversion.html&quot;&gt;톰캣 공식사이트&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="pt" />
      

      
        <summary type="html">톰캣 버전별 차이 Each version of Tomcat is supported for any stable Java release that meets the requirements of the final column in the table above. (표에 맞는 Java Version 이상을 사용해야 안정적인 Tomcat 동작을 지원한다.)</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">21 02 27</title>
      <link href="https://jaehong2.github.io//pt-8" rel="alternate" type="text/html" title="21 02 27" />
      <published>2021-02-26T22:03:00+09:00</published>
      <updated>2021-02-26T22:03:00+09:00</updated>
      <id>https://jaehong2.github.io//pt-8</id>
      <content type="html" xml:base="https://jaehong2.github.io//pt-8">&lt;h2 id=&quot;주제--백트레킹-mvc패턴&quot;&gt;주제 : 백트레킹, Mvc패턴&lt;/h2&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;백트레킹이란&quot;&gt;백트레킹이란&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;어떤 노드의 &lt;strong&gt;유망성을 판단&lt;/strong&gt; 후 노드가 유망하지 않다면 부모 노드로 돌아가&lt;br /&gt;
다른 자식 노드를 찾는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;baekjoon-n과-m1&quot;&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/15649&quot;&gt;BaekJoon N과 M(1)&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&quot;문제&quot;&gt;문제&lt;/h4&gt;

&lt;p&gt;자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.
  1부터 N까지 자연수 중에서 중복 없이 M개를 고른 수열&lt;/p&gt;

&lt;h4 id=&quot;입력&quot;&gt;입력&lt;/h4&gt;
&lt;p&gt;첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)&lt;/p&gt;
&lt;h4 id=&quot;출력&quot;&gt;출력&lt;/h4&gt;
&lt;p&gt;한 줄에 하나씩 문제의 조건을 만족하는 &lt;strong&gt;수열을 출력&lt;/strong&gt;한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.
수열은 &lt;strong&gt;사전 순으로 증가하는 순서&lt;/strong&gt;로 출력해야 한다.&lt;/p&gt;

&lt;p&gt;예제 입력&lt;/p&gt;
&lt;pre&gt;3 1&lt;/pre&gt;
&lt;p&gt;예제 출력&lt;/p&gt;
&lt;pre&gt;
1   
2  
3
&lt;/pre&gt;

&lt;p&gt;예제 입력&lt;/p&gt;
&lt;pre&gt;4 3&lt;/pre&gt;
&lt;p&gt;예제 출력&lt;/p&gt;
&lt;pre&gt;
1 2 3  
1 2 4  
1 3 2  
1 3 4  
1 4 2  
1 4 3  
2 1 3  
2 1 4  
2 3 1  
2 3 4  
2 4 1  
2 4 3  
3 1 2  
3 1 4  
3 2 1  
3 2 4  
3 4 1  
3 4 2  
4 1 2  
4 1 3  
4 2 1  
4 2 3  
4 3 1  
4 3 2  
&lt;/pre&gt;

&lt;h4 id=&quot;문제-분석&quot;&gt;문제 분석&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;중복되는 수를 제외한 모든 경우의수 탐색&lt;/li&gt;
  &lt;li&gt;재귀사용, 방문한 노드 라면 다음 노드 탐색(유망성 검사)&lt;/li&gt;
  &lt;li&gt;재귀함수임으로 기저조건(BaseCondition) 명시&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;코드&quot;&gt;코드&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[];&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[];&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringTokenizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//수열을 담을 배열&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 특정 수가 사용되었는지 &lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 재귀함수임으로 기저조건(BaseCondition) 명시&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// m개까지 탐색을 완료하면 SB에 수열 저장&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 부모 노드로 돌아간다.&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;c1&quot;&gt;//1부터 n까지 사용되지않은 수를 찾아냄&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]){&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;mvc1-mvc2-spring-frame에서-mvc2-패턴&quot;&gt;MVC1, MVC2, Spring Frame에서 MVC2 패턴&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_8/1.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림1&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;소프트웨어 디자인 패턴 중하나&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;M(Model) / V(View) / C(Controller)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Model : &lt;strong&gt;내부 비지니스 로직을 처리&lt;/strong&gt;하기 위한 역할을 할 것입니다. (DB 접근)
        &lt;ul&gt;
          &lt;li&gt;처리되는 알고리즘, DB 와 상호작용(CRUD Create Read Update Delete), 데이터 등등..&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;View : &lt;strong&gt;화면에 보여주기 위한 역할&lt;/strong&gt;을 합니다. 
컨트롤러 하위에 종속되어, 모델이나 컨트롤러가 보여주려고 하는 모든 필요한 것들을 보여줄 것입니다.
        &lt;ul&gt;
          &lt;li&gt;최종 사용자에게 화면(UI)으로 보여줌&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Controller : 데이터와 비즈니스 로직 사이의 상호 동작을 관리합니다. 
즉, &lt;strong&gt;모델과 뷰를 통제&lt;/strong&gt;합니다. MVC 패턴에서 View와 Model이 직접적인 상호 소통을 하지 않도록 관리합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;MVC 패턴은 크게 &lt;strong&gt;MVC 1&lt;/strong&gt; 패턴과, 스프링이 채택한 &lt;strong&gt;MVC 2 패턴&lt;/strong&gt;으로 나눌 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;mvc1&quot;&gt;MVC1&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_8/2.jpg&quot; alt=&quot;At text&quot; title=&quot;그림2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MVC1 패턴의 경우 View와 Controller를 모두 JSP가 담당하는 형태를 가집니다.&lt;br /&gt;
즉 JSP 하나로 유저의 요청을 받고 응답을 처리하므로 &lt;strong&gt;구현 난이도는 쉽습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;단순한 프로젝트에는 괜찮겠지만 &lt;strong&gt;내용이 복잡하고 거대해질수록&lt;/strong&gt; 이 패턴은 &lt;strong&gt;힘을 잃습니다&lt;/strong&gt;.
JSP 하나에서 MVC 가 모두 이루어지다보니 &lt;strong&gt;재사용성도 매우 떨어지고, 읽기도 힘들어집니다. 즉 유지보수에 있어서 문제&lt;/strong&gt;가 발생합니다.&lt;/p&gt;

&lt;h3 id=&quot;mvc2&quot;&gt;MVC2&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_8/3.jpg&quot; alt=&quot;At text&quot; title=&quot;그림3&quot; /&gt;
MVC2 패턴은 널리 표준으로 사용되는 패턴, &lt;strong&gt;요청을 하나의 컨트롤러(Servlet)&lt;/strong&gt;가 먼저 받습니다. 
즉 MVC1과는 다르게 &lt;strong&gt;Controller, View&lt;/strong&gt;가 분리되어 있습니다. 
따라서 역할이 분리되어 MVC1패턴에서의 단점을 보완할 수 있습니다. 
그러므로 개발자는 M, V, C 중에서 수정해야 할 부분이 있다면, 그것만 꺼내어 수정하면 됩니다. 따라서 &lt;strong&gt;유지보수에 있어서도 큰 이점&lt;/strong&gt;을 가집니다.&lt;/p&gt;

&lt;h3 id=&quot;spring-framkework에서-mvc2-패턴&quot;&gt;Spring FramkeWork에서 MVC2 패턴&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_8/5.jpg&quot; alt=&quot;At text&quot; title=&quot;그림5&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;요청이 들어오면 DispatcherServlet이 받고 요청내용을 HandlerMapping 에게 보냄&lt;/li&gt;
  &lt;li&gt;HandlerMapping에서는 가장 적합한 Controller 찾음&lt;/li&gt;
  &lt;li&gt;Controller 안에 적합한 메서드를 찾아 ModelAndView형식으로 return&lt;/li&gt;
  &lt;li&gt;ViewResolver는 결과에 해당하는 jsp 리턴 후 클라이언트에게 jsp 응답&lt;/li&gt;
  &lt;li&gt;http 관계 끊어짐&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;## References.&lt;br /&gt;
&lt;a href=&quot;https://tinkerbellbass.tistory.com/40&quot;&gt;https://velog.io/@taesunny/HTTP2HTTP-2.0-%EC%A0%95%EB%A6%AC&lt;/a&gt;
&lt;a href=&quot;https://www.acmicpc.net/problem/15649&quot;&gt;https://www.acmicpc.net/problem/15649&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="pt" />
      

      
        <summary type="html">주제 : 백트레킹, Mvc패턴</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">21 02 06</title>
      <link href="https://jaehong2.github.io//pt-5" rel="alternate" type="text/html" title="21 02 06" />
      <published>2021-02-05T02:03:00+09:00</published>
      <updated>2021-02-05T02:03:00+09:00</updated>
      <id>https://jaehong2.github.io//pt-5</id>
      <content type="html" xml:base="https://jaehong2.github.io//pt-5">&lt;h2 id=&quot;주제--http-09--20&quot;&gt;주제 : http 0.9 ~ 2.0&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;http-09--20&quot;&gt;HTTP 0.9 ~ 2.0&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_5/1.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림1&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;http-09&quot;&gt;HTTP 0.9&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_5/2.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림2&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;요청과 응답이 심플, 확장성이 없음&lt;/li&gt;
  &lt;li&gt;원 라인 프로토콜이라고도 불림&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;http-10&quot;&gt;HTTP 1.0&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_5/3.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림3&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Header가 추가됨(버전, 상태코드, Content-Type Header)&lt;/li&gt;
  &lt;li&gt;특징 : 1 Connection == 1 Request &amp;amp; 1 Response&lt;/li&gt;
  &lt;li&gt;문제점 : 요청당 Connection 발생(성능저하, 비용증가)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;http-11&quot;&gt;HTTP 1.1&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Persistent Connection&lt;/strong&gt; : 지정한 timeout 동안 Connection을 닫지 않는 방식
&lt;img src=&quot;/assets/built/images/pt/week_5/4.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림4&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Pipelining&lt;/strong&gt; : 하나의 커넥션에서 응답을 기다리지 않고 순차적인 여러 요청을
                   연속적으로 보내 순서에 맞춰 응답 받는 방식 (시간 절감)&lt;br /&gt;
&lt;img src=&quot;/assets/built/images/pt/week_5/5.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림5&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;문제점&lt;/strong&gt;   &lt;br /&gt;
&lt;img src=&quot;/assets/built/images/pt/week_5/6.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림6&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;첫번째요청이 처리하는 시간이 오래걸리면 두번째요청부터는 기다려야함&lt;/li&gt;
  &lt;li&gt;연속된 요청일 경우 중복 Header 전송&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;http-20&quot;&gt;HTTP 2.0&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;기존 HTTP/1.X 버전의 &lt;strong&gt;성능 향상&lt;/strong&gt;에 초점&lt;/li&gt;
  &lt;li&gt;표준의 대체가 아닌 &lt;strong&gt;확장&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;http-20-특징&quot;&gt;HTTP 2.0 특징&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1. Http 메세지 전송 방식의 변화&lt;/strong&gt;
&lt;img src=&quot;/assets/built/images/pt/week_5/7.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림7&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;바이너리 프레이밍 계층 사용 -&amp;gt; 파싱,전송 속도 증가, 오류 발생 가능성 낮아짐&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_5/8.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림8&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Stream : 연결된 커넥션 사이에서 바이트의 양방향 흐름. 하나 또는 하나 이상의 message를 전송함&lt;/li&gt;
  &lt;li&gt;Message : 프레임들의 완성된 배열. Request/Response의 논리적인 배열이라고 보면 된다.&lt;/li&gt;
  &lt;li&gt;Frame : HTTP/2.0 통신에서 가장 작은 단위의 유닛.&lt;br /&gt;
각각의 frame 은 헤더를 포함하고 있음. 헤더는 현재 전송되는 프레임이 어디에 포함되는 것인지 알려주는 최소 단위.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Request &amp;amp; Response Multiplexing&lt;/strong&gt;
&lt;img src=&quot;/assets/built/images/pt/week_5/8.5.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림8.5&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;요청과 응답이 다중화가 가능해짐&lt;/li&gt;
  &lt;li&gt;Frame으로 쪼개짐으로서 메세지간의 순서가 사라짐&lt;/li&gt;
  &lt;li&gt;1.1에서 Head Of Line Blocking 문제 해결&lt;/li&gt;
  &lt;li&gt;interleaving(끼워넣기) 방식 또한 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Stream Prioritization&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;리소스간의 전송 우선순위를 설정&lt;/li&gt;
  &lt;li&gt;각 스트림에는 1~256 사이의 정수 가중치가 할당될 수 있습니다.&lt;/li&gt;
  &lt;li&gt;각 스트림에는 다른 스트림에 대한 명시적 종속성이 부여될 수 있습니다.
&lt;img src=&quot;/assets/built/images/pt/week_5/9.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림9&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Server push&lt;/strong&gt;
&lt;img src=&quot;/assets/built/images/pt/week_5/10.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림10&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트가 요청 하지 않은 리소스들을 서버에서 자동 푸쉬&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5. 헤더 압축(Header Compression)&lt;/strong&gt;
&lt;img src=&quot;/assets/built/images/pt/week_5/11.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림11&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;기존 1.1에서는 header의 중복에 문제가 있었는데 2.0에서 해결&lt;/li&gt;
  &lt;li&gt;Static dynamic table 도입(중복된 내용은 인덱스만 뽑고, 새로추가된 내용은 허프만 인코딩으로 압축)&lt;/li&gt;
  &lt;li&gt;헤더의 크기를 줄여 페이지 로드 시간 감소&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://velog.io/@taesunny/HTTP2HTTP-2.0-%EC%A0%95%EB%A6%AC&quot;&gt;https://velog.io/@taesunny/HTTP2HTTP-2.0-%EC%A0%95%EB%A6%AC&lt;/a&gt;
&lt;a href=&quot;https://ijbgo.tistory.com/26&quot;&gt;https://ijbgo.tistory.com/26&lt;/a&gt;
&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP&quot;&gt;https://developer.mozilla.org/ko/docs/Web/HTTP&lt;/a&gt;
&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/http2?hl=ko&quot;&gt;https://developers.google.com/web/fundamentals/performance/http2?hl=ko&lt;/a&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=xcrjamphIp4&quot;&gt;https://www.youtube.com/watch?v=xcrjamphIp4&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="pt" />
      

      
        <summary type="html">주제 : http 0.9 ~ 2.0</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">21 01 30</title>
      <link href="https://jaehong2.github.io//pt-4" rel="alternate" type="text/html" title="21 01 30" />
      <published>2021-01-28T01:43:00+09:00</published>
      <updated>2021-01-28T01:43:00+09:00</updated>
      <id>https://jaehong2.github.io//pt-4</id>
      <content type="html" xml:base="https://jaehong2.github.io//pt-4">&lt;h2 id=&quot;주제--tcp-udp&quot;&gt;주제 : TCP, UDP&lt;/h2&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;4계층-transport-layer&quot;&gt;4계층 Transport Layer&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_4/2.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림2&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;End Point 간의 데이터 &lt;strong&gt;전송&lt;/strong&gt;을 담당하는 계층&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;tcp-transmission-control-protocol&quot;&gt;TCP (Transmission Control Protocol)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;신뢰성&lt;/strong&gt;있는 데이터 통신을 가능하게 해주는 프로토콜&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tcp-특징&quot;&gt;TCP 특징&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Connection 연결 (3 way-handshake)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;흐름제어(Flow Control) : &lt;strong&gt;데이터 처리 속도를 조절&lt;/strong&gt;하여 수신자의 버퍼 오버플로우를 방지&lt;/li&gt;
  &lt;li&gt;혼잡제어(Congestion Control) : &lt;strong&gt;네트워크 내의 패킷 수&lt;/strong&gt;가 넘치게 증가하지 않도록 방지&lt;/li&gt;
  &lt;li&gt;오류감지(Error Detection) : &lt;strong&gt;데이터 전달 중 오류 발생&lt;/strong&gt;시 해당 데이터 &lt;strong&gt;재전송&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;세그먼트segment&quot;&gt;세그먼트(Segment)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_4/123.png&quot; alt=&quot;Alt text&quot; title=&quot;그림1&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로토콜단 에서 데이터가 처리되고 이동하고 하는데 이때 처리되는 단위를 세그먼트&lt;/li&gt;
  &lt;li&gt;데이터를 전송 받으면 tcp 프로토콜안에서 데이터를 자르고 &lt;strong&gt;TCP Header&lt;/strong&gt;를 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tcp-header&quot;&gt;TCP Header&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_4/3.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림3&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-way-handshake&quot;&gt;3-way handshake&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;TCP 3 Way Handshake는 TCP/IP프로토콜을 이용해서 통신을 하는 응용프로그램이 데이터를 전송하기 전에 
먼저 &lt;strong&gt;정확한 전송을 보장하기 위해 상대방 컴퓨터와 사전에 세션을 수립하는 과정&lt;/strong&gt;을 의미한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-way-handshake-과정&quot;&gt;3-way handshake 과정&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_4/4.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림4&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[STEP 1]&lt;br /&gt;
클라이언트는 서버에 접속을 요청하는 SYN 패킷을 보낸다. 
이때 클라이언트는 SYN 을 보내고 SYN/ACK 응답을 기다리는 SYN_SENT 상태가 되는 것이다.&lt;/li&gt;
  &lt;li&gt;[STEP 2]&lt;br /&gt;
서버는 SYN요청을 받고 클라이언트에게 요청을 수락한다는 ACK 와 SYN flag 가 설정된 패킷을 발송하고 A가 다시 ACK으로 응답하기를 기다린다.&lt;br /&gt;
이때 서버는 SYN_RECEIVED 상태가 된다.&lt;/li&gt;
  &lt;li&gt;[STEP 3]&lt;br /&gt;
클라이언트는 서버에게 ACK을 보내고 이후로부터는 연결이 이루어지고 데이터가 오가게 되는것이다. 이때의 B서버 상태가 ESTABLISHED 이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tcp-데이터-전송-방식&quot;&gt;TCP 데이터 전송 방식&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_4/8.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림8&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-way-handshkae-과정&quot;&gt;4-way handshkae 과정&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_4/5.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림5&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[STEP 1]&lt;br /&gt;
클라이언트가 연결을 종료하겠다는 FIN플래그를 전송한다.&lt;/li&gt;
  &lt;li&gt;[STEP 2]&lt;br /&gt;
서버는 일단 확인메시지를 보내고 자신의 통신이 끝날때까지 기다리는데 이 상태가 TIME_WAIT상태다.&lt;/li&gt;
  &lt;li&gt;[STEP 3]&lt;br /&gt;
서버가 통신이 끝났으면 연결이 종료되었다고 클라이언트에게 FIN플래그를 전송한다.&lt;/li&gt;
  &lt;li&gt;[STEP 4]&lt;br /&gt;
클라이언트는 확인했다는 메시지를 보낸다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;tcp-문제점&quot;&gt;TCP 문제점&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;신뢰성있는 전송은 보장하지만..&lt;/li&gt;
  &lt;li&gt;매번 Connection 연결 -&amp;gt; 시간적 손실&lt;/li&gt;
  &lt;li&gt;패킷을 조금만 손실해도 재전송&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;udp&quot;&gt;UDP&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;TCP 보단 &lt;strong&gt;신뢰성이 떨어&lt;/strong&gt;지지만 &lt;strong&gt;전송 속도가 빠른&lt;/strong&gt; 프로토콜&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;udp-특징&quot;&gt;UDP 특징&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Connectionless(3 way-handshake x)&lt;/li&gt;
  &lt;li&gt;오류감지(Error Delection)&lt;/li&gt;
  &lt;li&gt;비교적 데이터의 신뢰성이 중요하지 않을때 사용(ex. 영상 스트리밍)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;udp-header&quot;&gt;UDP Header&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_4/6.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림6&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;udp-데이터-전송-방식&quot;&gt;UDP 데이터 전송 방식&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_4/7.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림7&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;정리&quot;&gt;정리&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;TCP와 UDP 모두 Header가 존재&lt;/li&gt;
  &lt;li&gt;포트 번호를 이용해서 데이터를 전달, 데이터 오류 검사를 위한 Checksum이 존재&lt;/li&gt;
  &lt;li&gt;TCP는 연결이 성공해야 통신이 가능(연결형 프로토콜), 3-way-handshake&lt;/li&gt;
  &lt;li&gt;UDP는 연결 없이 통신 가능 (비연결형 프로토콜)&lt;/li&gt;
  &lt;li&gt;신뢰도를 생각한다면 TCP 속도가 중요하면 UDP&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References.&lt;/h2&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="pt" />
      

      
        <summary type="html">주제 : TCP, UDP</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">21 01 23</title>
      <link href="https://jaehong2.github.io//pt-3" rel="alternate" type="text/html" title="21 01 23" />
      <published>2021-01-21T01:00:00+09:00</published>
      <updated>2021-01-21T01:00:00+09:00</updated>
      <id>https://jaehong2.github.io//pt-3</id>
      <content type="html" xml:base="https://jaehong2.github.io//pt-3">&lt;h2 id=&quot;osi-7-layer&quot;&gt;OSI 7 Layer&lt;/h2&gt;

&lt;h3 id=&quot;osi-7-layer에-대해&quot;&gt;OSI 7 Layer에 대해&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;네트워크를 구상할때 참조되는 모델&lt;/li&gt;
  &lt;li&gt;시스템들이 통신을 하기위해 7단계로 나누었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;1계층---물리계층physical-layer&quot;&gt;1계층 - 물리계층(Physical Layer)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;두 대의 컴퓨터가 통신하려면?
    &lt;ul&gt;
      &lt;li&gt;모든 프로그램은 0과 1로 구성되어있다.&lt;/li&gt;
      &lt;li&gt;결국 0 , 1만 주고 받으면된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;두대의 컴퓨터를 전선 하나로 연결한다고 가정해보자!
&lt;img src=&quot;/assets/built/images/pt/week_3/1.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림1&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;1을 보낼떄는 +5V의 전기를&lt;/li&gt;
      &lt;li&gt;0을 보낼때는 -5V의 전기를&lt;/li&gt;
      &lt;li&gt;0과 1의 전송이 가능 할 것이다. == 모든 데이터들을 주고받을 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러나 이방법은 실제선 잘 동작 하지 않았습니다.. Why?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_3/2.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림2&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;다음 그림은 sin 함수입니다.&lt;/li&gt;
  &lt;li&gt;시간당 전압을 보여준다.&lt;/li&gt;
  &lt;li&gt;전자기파를 표현하는 함수&lt;/li&gt;
  &lt;li&gt;이 파동이 진행되는 내내 주파수는 4이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하지만! 이런파동이라면?
&lt;img src=&quot;/assets/built/images/pt/week_3/3.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림3&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;주파수 값이 숫자하나로 고정되지 않는다.&lt;/li&gt;
  &lt;li&gt;이 전자기파는 파동이 진행되는 동안 주파수 값이 계속변합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_3/4.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림4&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;위 전자기파의 최소값이 1[Hz], 최대값이 10[Hz]라고 가정&lt;/li&gt;
  &lt;li&gt;그런데 전선은 모든 주파수를 다 통과 시키지 못한다.!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그런데!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;앞서 두 대의 컴퓨터 통신을 하려면 0과 1을 주고받을수 있으면 된다라고 했다.&lt;/li&gt;
  &lt;li&gt;두 대의 컴퓨터가 다음과 같은 전자기파를 주고 받으면 된다.
 &lt;img src=&quot;/assets/built/images/pt/week_3/5.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림5&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그런데!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;수직과 수평선이 있는 전자기파는 항상 0~무한대[Hz]의 주파수 범위를 가진답니다..&lt;/li&gt;
  &lt;li&gt;따라서 이런 전기신호를 통과 시킬수 있는 전선이 없습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러면 어떻게 전송해야 할까요?
&lt;img src=&quot;/assets/built/images/pt/week_3/6.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림6&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;아날로그 신호로 전송&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_3/7.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;요약 Physical layer&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;물리매체(전선 등)을 통해 bit 흐름전송&lt;/li&gt;
  &lt;li&gt;데이터 전송 단위 : 비트(Bit)&lt;/li&gt;
  &lt;li&gt;프로토콜 : RS-232&lt;/li&gt;
  &lt;li&gt;장비 : 리피터, 허브&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2계층---데이터-링크-계층data-link-layer&quot;&gt;2계층 - 데이터 링크 계층(Data-Link Layer)&lt;/h3&gt;
&lt;p&gt;시작하기 전에..&lt;/p&gt;

&lt;p&gt;여러대의 컴퓨터 간의 통신을 알아보자 
&lt;img src=&quot;/assets/built/images/pt/week_3/8.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림8&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;철수와 영희는 데이터를 주고 받고 싶어한다.
&lt;img src=&quot;/assets/built/images/pt/week_3/9.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림9&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;철수는 영수와도 데이터를 주고 받고 싶어한다.&lt;/li&gt;
  &lt;li&gt;그러면 … 전선을..몇개 설치해야되냐..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_3/10.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림10&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이런 방법은 전선을 꽃을곳과 전선 개수도 많이 필요 -&amp;gt; 비용증가 -&amp;gt; 비효율적&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;그러므로 전선하나로 여러대의 컴퓨터가 통신을 할 방법이 필요!
&lt;img src=&quot;/assets/built/images/pt/week_3/11.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림11&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;다음과 같이 전기가 통하는 구리선에 여러대의 컴퓨터가 있다고 가정&lt;/li&gt;
  &lt;li&gt;구리선은 전자기파가 흐를 수 있으니까 신호는 구리선과 연결된 모든 컴퓨터로 전달!.&lt;/li&gt;
  &lt;li&gt;그래도 영희에게 데이터가 전달되었으니 데이터 전송은 성공..&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;이제 가운데를 관통하는 전선을 구겨서 상자 안에 넣어보겠습니다.
&lt;img src=&quot;/assets/built/images/pt/week_3/12.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_3/13.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림13&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이렇게 만들면 4대의 컴퓨터가 그대로 통신 할 수 있는 상태이다.&lt;/li&gt;
  &lt;li&gt;하지만 철수가 영희에게 데이터를 보내려고하면 다른 두 대에 컴퓨터도 그 메세지를 읽을수있다..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그런데 상자가 수신자를 확인해서 전달해 줄 수 있으면 어떨까?? 이런 기능을 하도록 만든것이
&lt;img src=&quot;/assets/built/images/pt/week_3/14.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림14&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;스위치 입니다..&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;이번에는 새로운 상황을 보겠습니다.
&lt;img src=&quot;/assets/built/images/pt/week_3/15.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림15&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;서로 다른 두개의 네트워크가 구축되어있습니다.&lt;/li&gt;
  &lt;li&gt;이상황에서 철수가 영희에게 데이터를 보내고 싶어합니다.&lt;/li&gt;
  &lt;li&gt;그런데 전선으로 연결되있지 않아 통신 할 수 가 없습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그런데 만약
&lt;img src=&quot;/assets/built/images/pt/week_3/16.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림16&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;위 처럼 스위치와 스위치를 연결해서 서로 다른 네트워크에 속한 컴퓨터끼리 통신이 가능하게 해주는 장비를
&lt;img src=&quot;/assets/built/images/pt/week_3/17.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림17&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_3/18.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림18&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;그리고 이렇게 전세계 컴퓨터들을 연결한 것을 인터넷이라고 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이제 데이터 링크 계층을 본격적으로 보겠습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;앞서 두대의 컴퓨터가 0과 1이 된 데이터를 어떻게 주고 받는지 보았습니다. (OSI 1계층)&lt;/li&gt;
  &lt;li&gt;1계층에 기술만으로 여러대의 컴퓨터가 통신을 하도록 만들 수 없습니다.&lt;/li&gt;
  &lt;li&gt;이제 여러대의 컴퓨터가 어떻게 통신하는 지 보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_3/19.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림19&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;네대의 컴퓨터가 스위치 장비를 통해 연결되어있고&lt;/li&gt;
  &lt;li&gt;영희의 컴퓨터로 세 대의 컴퓨터가 데이터를 거의 동시에 보냈다고 가정해봅시다.&lt;/li&gt;
  &lt;li&gt;데이터를 어떻게 끊어 읽을까??.. -&amp;gt; 송신자는 데이터 앞 뒤에 특정한 비트열을 붙입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_3/20.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림20&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;같은 네트워크에 있는 여러 대의 컴퓨터들이 데이터를 주고받기 위해서 필요한 모듈&lt;/li&gt;
  &lt;li&gt;Framing은 Data-link에 속하는 작업 중 하나입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_3/21.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림21&quot; /&gt;
요약 Data Link Layer&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터링크 계층의 프레임을 받아 전선등&lt;/li&gt;
  &lt;li&gt;데이터 전송 단위 : 프레임(Frame)&lt;/li&gt;
  &lt;li&gt;프로토콜 : 이더넷, PPP, ALOHA 등&lt;/li&gt;
  &lt;li&gt;장비 : 브릿지, 스위치&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3계층---네트워크-계층-network-layer&quot;&gt;3계층 - 네트워크 계층 (NetWork Layer)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_3/22.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림22&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A가 B에게 데이터를 전송하고싶어합니다.&lt;/li&gt;
  &lt;li&gt;A는 데이터 앞에 목적지 주소 즉B의 주소를 붙이는데&lt;/li&gt;
  &lt;li&gt;이와 같이 각 컴퓨터들이 갖는 고유한 주소를 IP라고 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;요약 NetWork Layer&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;수많은 네트워크로 연결로 이루어지는 inter-network 속에서&lt;/li&gt;
  &lt;li&gt;어딘가에 있는 목적지 컴퓨터로 데이터를 전송하기 위해,&lt;/li&gt;
  &lt;li&gt;Ip 주소를 이용해 길을 찾고(routing)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자신 다음의 라우터에게 데이터를 넘겨주는 것(forwarding)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 전송 단위 : 패킷(packet)&lt;/li&gt;
  &lt;li&gt;프로토콜 : IP, RIP, ARP, ICMP&lt;/li&gt;
  &lt;li&gt;장비 : 라우터&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4계층---전송-계층-transport-layer&quot;&gt;4계층 - 전송 계층 (Transport Layer)&lt;/h3&gt;
&lt;p&gt;앞에 네트워크 Layer까지 하면서 이제 인터넷상의 모든 컴퓨터가 서로 통신을 할 수 있게 되었습니다.
&lt;img src=&quot;/assets/built/images/pt/week_3/23.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림23&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이 컴퓨터에는 여러개의 프로그램이 실행되어있고&lt;/li&gt;
  &lt;li&gt;컴퓨터는 세 개의 데이터를 프로세스 들에게 나누어 주려고 합니다.&lt;/li&gt;
  &lt;li&gt;컴퓨터가 무슨 프로세스에게 데이터를 줄지 어떻게 알수있을까요?&lt;/li&gt;
  &lt;li&gt;프로세스들은 포트번호를 가져야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;한편 송신자는 데이터를 보낼때 데이터를 받는 수신자 컴퓨터에 있는 프로세스 포트번호를 붙여서 보냅니다.
&lt;img src=&quot;/assets/built/images/pt/week_3/24.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;요약 Transport Layer&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;포트 번호를 사용하여 도착지 컴퓨터의 프로세스에 까지 데이터가 도달하게 하는 모듈&lt;/li&gt;
  &lt;li&gt;데이터 전송 단위 - TCP 일 때 Segment / UDP 일 때 Datagram&lt;/li&gt;
  &lt;li&gt;프로토콜 - TCP, UDP&lt;/li&gt;
  &lt;li&gt;장비 : 게이트 웨이&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5계층---세션-계층session-layer&quot;&gt;5계층 - 세션 계층(Session Layer)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_3/25.jpg&quot; alt=&quot;Alt text&quot; title=&quot;그림25&quot; /&gt;
요약 Session Layer&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;양 끝단의 응용 프로세스가 통신을 관리하기 위한 방법을 제공&lt;/li&gt;
  &lt;li&gt;통신 세션을 구성하며 포트 번호를 기반으로 연결&lt;/li&gt;
  &lt;li&gt;데이터 전송 단위 : 메시지(message)&lt;/li&gt;
  &lt;li&gt;프로토콜 - NetBIOS, SSH&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6계층---표현-계층presentation-layer&quot;&gt;6계층 - 표현 계층(Presentation layer)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 변환, 암호화, 압축 기능&lt;/li&gt;
  &lt;li&gt;데이터 전송 단위 : 메시지(message)&lt;/li&gt;
  &lt;li&gt;프로토콜 - JPG, MPEG, AFP, PAP&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;7계층---응용-계층application-layer&quot;&gt;7계층 - 응용 계층(Application Layer)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;사용자에게 서비스 제공&lt;/li&gt;
  &lt;li&gt;데이터 전송 단위 : 메시지(message)&lt;/li&gt;
  &lt;li&gt;프로토콜 : HTTP, FTP, DNS, SMTP&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=1pfTxp25MA8&quot;&gt;우테크 히히님 자료&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="pt" />
      

      
        <summary type="html">OSI 7 Layer</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">21 01 16</title>
      <link href="https://jaehong2.github.io//pt-2" rel="alternate" type="text/html" title="21 01 16" />
      <published>2021-01-14T01:00:00+09:00</published>
      <updated>2021-01-14T01:00:00+09:00</updated>
      <id>https://jaehong2.github.io//pt-2</id>
      <content type="html" xml:base="https://jaehong2.github.io//pt-2">&lt;h3 id=&quot;collection-구조&quot;&gt;Collection 구조&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_2/7.jpg&quot; alt=&quot;Alt text&quot; title=&quot;Collection구조&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Queue를 상속하고 있는 Deque&lt;/li&gt;
  &lt;li&gt;Queue는 단방향으로 삽입삭제가 가능하다면 Deque은 양방향에서 삽입삭제가 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;queuedeque-interface를-구현하는-클래스들&quot;&gt;Queue/Deque Interface를 구현하는 클래스들&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;LinkedList&lt;/li&gt;
  &lt;li&gt;ArrayDeque&lt;/li&gt;
  &lt;li&gt;Priority Queue&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;linkedlist-class&quot;&gt;LinkedList Class&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_2/8.jpg&quot; alt=&quot;Alt text&quot; title=&quot;LinkedList Class&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;큐의-정의&quot;&gt;큐의 정의&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;큐의 사전적의미는 무엇을 기다리는 사람의 줄&lt;/li&gt;
  &lt;li&gt;FIFO (First In First Out, 선입선출), FCFS (First Come First Service)&lt;/li&gt;
  &lt;li&gt;한쪽 끝에서는 삽입만 다른 한쪽 끝에서는 삭제만 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;큐-주요-메소드-및-용어&quot;&gt;큐 주요 메소드 및 용어&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_2/1.jpg&quot; alt=&quot;Alt text&quot; title=&quot;큐 그림&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;메소드&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Enqueue&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;큐에 데이터 삽입 하는 메서드&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Dequeue&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;큐에 데이터 삭제 하는 메서드&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;isEmpty&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;큐가 empty 상태 인지 확인&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;isFull&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;큐가 full 상태 인지 확인&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;peek&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;큐의 첫번째 위치에 있는 데이터 추출&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;용어&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;front, head&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;삭제가 발생하는 지점을 가르킨다.(포인터로 해석)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rear, tail&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;삽입이 발생하는 지점을 가르킨다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;배열로-큐-구현&quot;&gt;배열로 큐 구현&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayQueue&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 큐 배열은 front , rear , queue의 size를 가진다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queueSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queueArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[];&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 생성자에서 초기화&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArrayQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queueSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queueSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queueSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// queue 사이즈 설정&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queueArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queueSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 큐 배열 생성&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 큐가 비어있는 상태인지 확인&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;empty&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 큐가 가득찬 상태인지 확인&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// rear 포인터가 큐의 마지막 인덱스와 동일하면 true 아니면 false&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queueSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 큐에 데이터 삽입 rear 증가&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArrayIndexOutOfBoundsException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;queueArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 다음 rear 포인터가 가리키는 위치에 데이터 추가&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Inserted Item : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 큐에서 데이터 추출 후 front 증가&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Deleted Item : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queueArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 큐의 첫번째 데이터 추출&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Peeked Item : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queueArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queueArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 큐에 저장된 모든 데이터를 출력&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Queue elements : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queueArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queueSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ArrayQueue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queueSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;


        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dequeue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arrQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;enqueue-그림&quot;&gt;enqueue 그림&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_2/2.jpg&quot; alt=&quot;Alt text&quot; title=&quot;코드 그림1&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;코드-결과&quot;&gt;코드 결과&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_2/3.jpg&quot; alt=&quot;Alt text&quot; title=&quot;코드 결과1&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;enqueue 시 rear 1증가&lt;/li&gt;
  &lt;li&gt;dequeue 시 front 1증가&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;문제점&quot;&gt;문제점&lt;/h4&gt;
&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;데이터가 다 차있지 않더라도 rear와 front가 계속 증가되다 보면 언젠가는 
배열의 사이즈까지 도달하여 더이상 사용할 수 없게 된다는  문제점이 발생한다.
&lt;/span&gt;       &lt;br /&gt;
&lt;img src=&quot;/assets/built/images/pt/week_2/4.jpg&quot; alt=&quot;Alt text&quot; title=&quot;문제점&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;원형-환형-큐circular-queue&quot;&gt;원형, 환형 큐(Circular Queue)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;원형큐는 논리적으로 배열의 처음과 끝이 연결 되어있는 것으로 간주한다.&lt;/li&gt;
  &lt;li&gt;공백상태와 포화 상태를 쉽게 구분하기위해 &lt;b style=&quot;color:red&quot;&gt;자리 하나를 항상 비워둔다.&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;초기 상태에서는 rear, front 값이 &lt;b style=&quot;color:red&quot;&gt;0&lt;/b&gt;이 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/pt/week_2/5.jpg&quot; alt=&quot;Alt text&quot; title=&quot;원형큐&quot; /&gt;
&lt;img src=&quot;/assets/built/images/pt/week_2/6.jpg&quot; alt=&quot;Alt text&quot; title=&quot;원형큐&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;우선순위-큐priority-queue&quot;&gt;우선순위 큐(Priority Queue)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;말그대로 ‘우선순위큐’ 우선순위가 가장 높은 데이터를 가장 먼저 삭제 하는 자료구조&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;구현방법
    &lt;ol&gt;
      &lt;li&gt;리스트를 이용하여 구현&lt;/li&gt;
      &lt;li&gt;힙(heap)을 이용하여 구현&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;heap의 특징
    &lt;ul&gt;
      &lt;li&gt;완전 이진 트리 자료구조&lt;/li&gt;
      &lt;li&gt;힙에서는 항상 루트 노드(root node)를 제거&lt;/li&gt;
      &lt;li&gt;최소 힙(min heap)
        &lt;ul&gt;
          &lt;li&gt;루트 노드가 가장 작은 값을 가집니다.&lt;/li&gt;
          &lt;li&gt;따라서 값이 작은 데이터가 우선적으로 제거&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;최대 힙(max heap)
        &lt;ul&gt;
          &lt;li&gt;루트 노드가 가장 큰 값을 가집니다.&lt;/li&gt;
          &lt;li&gt;따라서 값이 큰 데이터가 우선적으로 제거됩니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;완전 이진 트리
    &lt;ul&gt;
      &lt;li&gt;root 노드 부터 시작하여, 왼쪽 자식 노드, 오른쪽 자식 노드 순으로 데이터가 
 차례대로 삽입되는 트리(tree)를 의미합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Min-Heapify()
    &lt;ul&gt;
      &lt;li&gt;어떤한 데이터를 힙(heap)에 넣었을 때 힙자료구조가 힙의 성질을 가질때 필요!
-Heapify : 일반적으로 힙을 구성하는 함수의 이름을 말한다.
-상향식
-하양식&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;deque-데크&quot;&gt;Deque 데크&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;양쪽 큐 끝에서 삽입삭제가 모두 발생 할 수있는 큐&lt;/li&gt;
  &lt;li&gt;삽입 삭제가 용이, 데이터 중간&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References.&lt;/h2&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="pt" />
      

      
        <summary type="html">Collection 구조</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">21 01 09</title>
      <link href="https://jaehong2.github.io//pt-1" rel="alternate" type="text/html" title="21 01 09" />
      <published>2021-01-06T20:45:00+09:00</published>
      <updated>2021-01-06T20:45:00+09:00</updated>
      <id>https://jaehong2.github.io//pt-1</id>
      <content type="html" xml:base="https://jaehong2.github.io//pt-1">&lt;!-- 210109 --&gt;

&lt;h2&gt;DI(Dendency Injection)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;assets/built/images/pt/week_1/4.jpg&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;약한 결합과 강한 결합&lt;/h4&gt;
&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important;overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0;padding:0;border:none;background-color:#fafafa;border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px;border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0;padding:0;word-break:normal;text-align:right;color:#666;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;7&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;8&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;9&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;10&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;11&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;12&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;13&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;14&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;15&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;16&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;17&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;18&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;19&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;20&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;21&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;22&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0;text-align:left&quot;&gt;&lt;div style=&quot;margin:0;padding:0;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;import&lt;/span&gt;&amp;nbsp;java.util.Date;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;class&lt;/span&gt;&amp;nbsp;DI&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;main(&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;[]&amp;nbsp;args)&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Date&amp;nbsp;date&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;new&lt;/span&gt;&amp;nbsp;Date();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;getDate(Date&amp;nbsp;d)&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Date&amp;nbsp;date&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;d;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;User1()&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Member&amp;nbsp;m1&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;new&lt;/span&gt;&amp;nbsp;Member();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;User2(Member&amp;nbsp;m)&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Member&amp;nbsp;m2&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;m;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;class&lt;/span&gt;&amp;nbsp;Member&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;&amp;nbsp;name;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;&amp;nbsp;phone;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;Member()&amp;nbsp;{}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align:right;margin-top:-13px;margin-right:5px;font-size:9px;font-style:italic&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color:#e5e5e5text-decoration:none&quot;&gt;Colored by Color Scripter&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom;padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none;color:white&quot;&gt;&lt;span style=&quot;font-size:9px;word-break:normal;background-color:#e5e5e5;color:white;border-radius:10px;padding:1px&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3&gt;2.스택(Stack)&lt;/h3&gt;
&lt;h4&gt;2-1.스택이란 &lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;assets/built/images/pt/week_1/2.jpg&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;한 쪽 끝에서만 자료를 넣고 뺄 수 있는 형식의 자료 구조&lt;/li&gt;
    &lt;li&gt;LIFO&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;2-2 스택 구현&lt;/h4&gt;
&lt;p&gt;다음은 일반적으로 스택에 사용되는 필수적인 메서드 입니다.&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;push : 스택의 가장 최상위에 데이터를 삽입&lt;/li&gt;
    &lt;li&gt;pop  : 스택의 가장 최상위에 위치한 데이터를 삭제&lt;/li&gt;
    &lt;li&gt;Empty : 스텍이 empty 상태인지 확인&lt;/li&gt;
    &lt;li&gt;clear : 스택에 저장된 모든 데이터를 삭제하고 스택을 초기화&lt;/li&gt;
    &lt;li&gt;peek : 스택에 가장 최상위에 위치한 데이터를 추출&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important;overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0;padding:0;border:none;background-color:#fafafa;border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px;border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0;padding:0;word-break:normal;text-align:right;color:#666;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;7&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;8&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;9&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;10&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;11&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;12&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;13&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;14&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;15&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;16&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;17&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;18&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;19&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;20&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;21&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;22&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;23&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;24&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;25&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;26&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;27&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;28&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;29&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;30&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;31&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;32&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;33&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;34&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;35&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;36&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;37&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;38&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;39&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;40&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;41&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;42&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;43&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;44&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;45&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;46&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;47&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;48&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;49&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;50&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;51&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;52&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;53&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;54&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;55&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;56&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;57&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;58&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;59&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;60&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;61&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;62&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;63&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;64&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;65&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;66&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;67&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;68&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;69&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;70&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;71&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;72&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;73&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;74&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;75&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;76&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;77&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;78&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;79&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;80&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;81&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;82&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;83&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;84&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;85&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;86&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;87&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;88&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;89&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;90&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;91&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;92&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;93&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;94&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;95&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;96&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;97&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;98&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;99&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;100&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;101&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;102&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;103&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;104&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;105&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;106&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;107&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;108&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;109&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0;text-align:left&quot;&gt;&lt;div style=&quot;margin:0;padding:0;color:#010101;font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important;line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;class&lt;/span&gt;&amp;nbsp;ArrayStack&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;implements&lt;/span&gt;&amp;nbsp;Stack{&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;top;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;stackSize;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;stackArr[];&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//생성자에서&amp;nbsp;스택생성&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;ArrayStack(&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;stackSize)&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;top&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;1&lt;/span&gt;;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//스택&amp;nbsp;포인터&amp;nbsp;초기화&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;this&lt;/span&gt;.stackSize&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;stackSize;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stackArr&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;[&lt;span style=&quot;color:#a71d5d&quot;&gt;this&lt;/span&gt;.stackSize];&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//stack&amp;nbsp;배열생성&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//스택이&amp;nbsp;비어있는&amp;nbsp;상태인지&amp;nbsp;확인&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;isEmpty()&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;return&lt;/span&gt;&amp;nbsp;(top&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;1&lt;/span&gt;);&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//&amp;nbsp;스택&amp;nbsp;포인터가&amp;nbsp;-1인경우&amp;nbsp;true&amp;nbsp;반환&amp;nbsp;값이있으면&amp;nbsp;false&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//스택이&amp;nbsp;가득차있는&amp;nbsp;상태인지&amp;nbsp;확인&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;isFull()&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;return&lt;/span&gt;&amp;nbsp;top&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;this&lt;/span&gt;.stackSize&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;1&lt;/span&gt;;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//스택&amp;nbsp;포인터가&amp;nbsp;마지막인덱스와&amp;nbsp;동일한경우&amp;nbsp;true&amp;nbsp;아닌&amp;nbsp;경우&amp;nbsp;false&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//스택에&amp;nbsp;데이터&amp;nbsp;추가&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;push(&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;item)&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;if&lt;/span&gt;(isFull())&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;스택이&amp;nbsp;가득&amp;nbsp;차있습니다.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;span style=&quot;color:#a71d5d&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stackArr[&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;top]&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;item;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//다음&amp;nbsp;스택포인터가르키고&amp;nbsp;데이터&amp;nbsp;추가&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;Item&amp;nbsp;삽입:&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;&amp;nbsp;item);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//스택의&amp;nbsp;최상위&amp;nbsp;데이터&amp;nbsp;추출&amp;nbsp;후&amp;nbsp;삭제&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;pop()&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;if&lt;/span&gt;(isEmpty())&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;스택이&amp;nbsp;비어있습니다.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;span style=&quot;color:#a71d5d&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;Item&amp;nbsp;삭제&amp;nbsp;:&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;stackArr[top]);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;return&lt;/span&gt;&amp;nbsp;stackArr[top&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;];&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;method&amp;nbsp;stub&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0099cc&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//스택의&amp;nbsp;최상위&amp;nbsp;데이터&amp;nbsp;추출&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;peek()&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;if&lt;/span&gt;(isEmpty())&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;스택이&amp;nbsp;비어있습니다.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;span style=&quot;color:#a71d5d&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;Item&amp;nbsp;추출&amp;nbsp;:&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;&amp;nbsp;stackArr[top]);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;method&amp;nbsp;stub&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;return&lt;/span&gt;&amp;nbsp;stackArr[top];&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//스택&amp;nbsp;초기화&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;clear()&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;if&lt;/span&gt;(isEmpty()){&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;스택이&amp;nbsp;비어있습니다.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;span style=&quot;color:#a71d5d&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;top&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;-&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0099cc&quot;&gt;1&lt;/span&gt;;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//스택&amp;nbsp;포인터&amp;nbsp;초기화&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stackArr&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;[&lt;span style=&quot;color:#a71d5d&quot;&gt;this&lt;/span&gt;.stackSize];&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//새로운&amp;nbsp;스택&amp;nbsp;생성&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;스택&amp;nbsp;초기화&amp;nbsp;완료&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#999999&quot;&gt;//스택내용&amp;nbsp;모두&amp;nbsp;출력&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;printStack()&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;if&lt;/span&gt;(isEmpty())&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;스택이&amp;nbsp;비어있습니다.&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;else&lt;/span&gt;&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;Stack&amp;nbsp;list&amp;nbsp;:&amp;nbsp;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;i&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;0&lt;/span&gt;;&amp;nbsp;i&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;top;&amp;nbsp;i&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;)&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;print&lt;/span&gt;(stackArr[i]&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;&quot;&amp;nbsp;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;System&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;out&lt;/span&gt;.&lt;span style=&quot;color:#066de2&quot;&gt;println&lt;/span&gt;();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;void&lt;/span&gt;&amp;nbsp;main(&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;[]&amp;nbsp;args)&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;int&lt;/span&gt;&amp;nbsp;stackSize&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0099cc&quot;&gt;5&lt;/span&gt;;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ArrayStack&amp;nbsp;arrStack&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;new&lt;/span&gt;&amp;nbsp;ArrayStack(stackSize);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.push(&lt;span style=&quot;color:#0099cc&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.printStack();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.push(&lt;span style=&quot;color:#0099cc&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.printStack();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.push(&lt;span style=&quot;color:#0099cc&quot;&gt;3&lt;/span&gt;);&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.printStack();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.pop();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.printStack();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.pop();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.printStack();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.peek();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.printStack();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.clear();&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;}&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align:right;margin-top:-13px;margin-right:5px;font-size:9px;font-style:italic&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color:#e5e5e5text-decoration:none&quot;&gt;Colored by Color Scripter&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom;padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;text-decoration:none;color:white&quot;&gt;&lt;span style=&quot;font-size:9px;word-break:normal;background-color:#e5e5e5;color:white;border-radius:10px;padding:1px&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h4&gt;Result&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;assets/built/images/pt/week_1/3.jpg&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;2-3 스택의 사용사례&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;재귀 알고리즘&lt;/li&gt;
    &lt;li&gt;웹 방문기록(뒤로가기)&lt;/li&gt;
    &lt;li&gt;후위 표기법 계산&lt;/li&gt;
    &lt;li&gt;역순 문자열 만들기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;팩토리얼 구하기 (Factorial)!&lt;/mark&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;white-space:pre&quot;&gt;
그리고 이코드를 재귀 함수로 표현해보면 만약 5! 을 구해야된다고 가정을하면
&lt;b&gt;factorial(5) = 5 *   4 * 3 * 2 * 1&lt;/b&gt; = &lt;b style=&quot;color: #3eb0ef&quot;&gt;5 * factorial(4);&lt;/b&gt;
&lt;b&gt;factorial(4) = 4 *   3 * 2 * 1&lt;/b&gt; = &lt;b style=&quot;color: #3eb0ef&quot;&gt;4 * factorial(3);&lt;/b&gt;
&lt;b&gt;factorial(3) = 3 *   2 * 1&lt;/b&gt; = &lt;b style=&quot;color: #3eb0ef&quot;&gt;3 * factorial(2);&lt;/b&gt;
&lt;b&gt;factorial(2) = 2 *   1&lt;/b&gt; = &lt;b style=&quot;color: #3eb0ef&quot;&gt;2 * factorial(1);&lt;/b&gt;
&lt;b&gt;factorial(1) = 1&lt;/b&gt;
&lt;/div&gt;

&lt;p&gt;여기서부터는 점화식이 보이기 시작한다. 저 규칙대로하면 &lt;mark&gt;factorial(n) = n * factorial(n-1)&lt;/mark&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//BaseCase&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt;2-5 시간복잡도&lt;/h4&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;td style=&quot;width: 14%&quot;&gt;Insert, Delete&lt;/td&gt;
        &lt;td style=&quot;width: 40%&quot;&gt;O(1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;Search&lt;/td&gt;
        &lt;td&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://8boknote.tistory.com/67&quot;&gt;https://8boknote.tistory.com/67&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://im-developer.tistory.com/121&quot;&gt;https://im-developer.tistory.com/121&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://wonwoo.ml/index.php/post/1571&quot;&gt;http://wonwoo.ml/index.php/post/1571&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="pt" />
      

      
        <summary type="html">DI(Dendency Injection) 약한 결합과 강한 결합 12345678910111213141516171819202122import&amp;nbsp;java.util.Date;&amp;nbsp;public&amp;nbsp;class&amp;nbsp;DI&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Date&amp;nbsp;date&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;getDate(Date&amp;nbsp;d)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Date&amp;nbsp;date&amp;nbsp;=&amp;nbsp;d;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;&amp;nbsp;static&amp;nbsp;void&amp;nbsp;User1()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Member&amp;nbsp;m1&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Member();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;&amp;nbsp;static&amp;nbsp;void&amp;nbsp;User2(Member&amp;nbsp;m)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Member&amp;nbsp;m2&amp;nbsp;=&amp;nbsp;m;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}}class&amp;nbsp;Member&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;name;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String&amp;nbsp;phone;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;Member()&amp;nbsp;{}}&amp;nbsp;Colored by Color Scriptercs 2.스택(Stack) 2-1.스택이란 한 쪽 끝에서만 자료를 넣고 뺄 수 있는 형식의 자료 구조 LIFO 2-2 스택 구현 다음은 일반적으로 스택에 사용되는 필수적인 메서드 입니다. push : 스택의 가장 최상위에 데이터를 삽입 pop : 스택의 가장 최상위에 위치한 데이터를 삭제 Empty : 스텍이 empty 상태인지 확인 clear : 스택에 저장된 모든 데이터를 삭제하고 스택을 초기화 peek : 스택에 가장 최상위에 위치한 데이터를 추출 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109public&amp;nbsp;class&amp;nbsp;ArrayStack&amp;nbsp;implements&amp;nbsp;Stack{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;top;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;stackSize;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;stackArr[];&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//생성자에서&amp;nbsp;스택생성&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;ArrayStack(int&amp;nbsp;stackSize)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;top&amp;nbsp;=&amp;nbsp;-1;&amp;nbsp;//스택&amp;nbsp;포인터&amp;nbsp;초기화&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.stackSize&amp;nbsp;=&amp;nbsp;stackSize;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stackArr&amp;nbsp;=&amp;nbsp;new&amp;nbsp;int[this.stackSize];&amp;nbsp;//stack&amp;nbsp;배열생성&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//스택이&amp;nbsp;비어있는&amp;nbsp;상태인지&amp;nbsp;확인&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;isEmpty()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;(top&amp;nbsp;==&amp;nbsp;-1);&amp;nbsp;//&amp;nbsp;스택&amp;nbsp;포인터가&amp;nbsp;-1인경우&amp;nbsp;true&amp;nbsp;반환&amp;nbsp;값이있으면&amp;nbsp;false&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//스택이&amp;nbsp;가득차있는&amp;nbsp;상태인지&amp;nbsp;확인&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;boolean&amp;nbsp;isFull()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;top&amp;nbsp;==&amp;nbsp;this.stackSize-1;&amp;nbsp;//스택&amp;nbsp;포인터가&amp;nbsp;마지막인덱스와&amp;nbsp;동일한경우&amp;nbsp;true&amp;nbsp;아닌&amp;nbsp;경우&amp;nbsp;false&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//스택에&amp;nbsp;데이터&amp;nbsp;추가&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;push(int&amp;nbsp;item)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(isFull())&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;스택이&amp;nbsp;가득&amp;nbsp;차있습니다.&quot;);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stackArr[++top]&amp;nbsp;=&amp;nbsp;item;&amp;nbsp;//다음&amp;nbsp;스택포인터가르키고&amp;nbsp;데이터&amp;nbsp;추가&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;Item&amp;nbsp;삽입:&amp;nbsp;&quot;&amp;nbsp;+&amp;nbsp;item);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//스택의&amp;nbsp;최상위&amp;nbsp;데이터&amp;nbsp;추출&amp;nbsp;후&amp;nbsp;삭제&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;pop()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(isEmpty())&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;스택이&amp;nbsp;비어있습니다.&quot;);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;Item&amp;nbsp;삭제&amp;nbsp;:&amp;nbsp;&quot;&amp;nbsp;+stackArr[top]);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;stackArr[top--];&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;method&amp;nbsp;stub&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;0;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//스택의&amp;nbsp;최상위&amp;nbsp;데이터&amp;nbsp;추출&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;int&amp;nbsp;peek()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(isEmpty())&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;스택이&amp;nbsp;비어있습니다.&quot;);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;Item&amp;nbsp;추출&amp;nbsp;:&amp;nbsp;&quot;&amp;nbsp;+&amp;nbsp;stackArr[top]);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;TODO&amp;nbsp;Auto-generated&amp;nbsp;method&amp;nbsp;stub&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;stackArr[top];&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//스택&amp;nbsp;초기화&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;clear()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(isEmpty()){&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;스택이&amp;nbsp;비어있습니다.&quot;);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;top&amp;nbsp;=&amp;nbsp;-&amp;nbsp;1;&amp;nbsp;//스택&amp;nbsp;포인터&amp;nbsp;초기화&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stackArr&amp;nbsp;=&amp;nbsp;new&amp;nbsp;int[this.stackSize];&amp;nbsp;//새로운&amp;nbsp;스택&amp;nbsp;생성&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;스택&amp;nbsp;초기화&amp;nbsp;완료&quot;);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//스택내용&amp;nbsp;모두&amp;nbsp;출력&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;void&amp;nbsp;printStack()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(isEmpty())&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&quot;스택이&amp;nbsp;비어있습니다.&quot;);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print(&quot;Stack&amp;nbsp;list&amp;nbsp;:&amp;nbsp;&quot;);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for(int&amp;nbsp;i=0;&amp;nbsp;i&amp;lt;=top;&amp;nbsp;i++)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print(stackArr[i]&amp;nbsp;+&amp;nbsp;&quot;&amp;nbsp;&quot;);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public&amp;nbsp;static&amp;nbsp;void&amp;nbsp;main(String[]&amp;nbsp;args)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;stackSize&amp;nbsp;=&amp;nbsp;5;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ArrayStack&amp;nbsp;arrStack&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayStack(stackSize);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.push(1);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.printStack();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.push(2);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.printStack();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.push(3);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.printStack();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.pop();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.printStack();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.pop();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.printStack();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.peek();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.printStack();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;arrStack.clear();&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}}Colored by Color Scriptercs Result 2-3 스택의 사용사례 재귀 알고리즘 웹 방문기록(뒤로가기) 후위 표기법 계산 역순 문자열 만들기 팩토리얼 구하기 (Factorial)! static int factorial(int n) { int result = 1; for(int i= n; i &amp;gt;= 1; i--) { result *= i; } return result; } 그리고 이코드를 재귀 함수로 표현해보면 만약 5! 을 구해야된다고 가정을하면 factorial(5) = 5 * 4 * 3 * 2 * 1 = 5 * factorial(4); factorial(4) = 4 * 3 * 2 * 1 = 4 * factorial(3); factorial(3) = 3 * 2 * 1 = 3 * factorial(2); factorial(2) = 2 * 1 = 2 * factorial(1); factorial(1) = 1 여기서부터는 점화식이 보이기 시작한다. 저 규칙대로하면 factorial(n) = n * factorial(n-1) static int factorial(int n) { if(n == 1) { //BaseCase return 1; } return n * factorial(n-1); } 2-5 시간복잡도 Insert, Delete O(1) Search O(n) References. https://8boknote.tistory.com/67 https://im-developer.tistory.com/121 http://wonwoo.ml/index.php/post/1571</summary>
      

      
      
    </entry>
  
</feed>
