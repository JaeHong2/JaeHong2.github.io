<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://jaehong2.github.io//tag/java/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://jaehong2.github.io//" rel="alternate" type="text/html" />
  <updated>2020-12-02T23:30:37+09:00</updated>
  <id>https://jaehong2.github.io//tag/java/feed.xml</id>

  
  
  

  
    <title type="html">오늘의 공부기록 | </title>
  

  
    <subtitle>IT study</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">bean</title>
      <link href="https://jaehong2.github.io//jsp-bean.html" rel="alternate" type="text/html" title="bean" />
      <published>2020-11-30T05:30:44+09:00</published>
      <updated>2020-11-30T05:30:44+09:00</updated>
      <id>https://jaehong2.github.io//jsp-bean.html</id>
      <content type="html" xml:base="https://jaehong2.github.io//jsp-bean.html">&lt;h2&gt;빈 태그&lt;/h2&gt;

&lt;p&gt;Java언어의 데이터(속성)과 기능(메소드)로 이루어진 클래스&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;useBean&lt;/li&gt;
    &lt;li&gt;setProperty&lt;/li&gt;
    &lt;li&gt;getProperty&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;useBean&lt;/h2&gt;
&lt;p&gt;특정 Bean을 사용한다고 명시 할떄 사용&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;              &lt;span class=&quot;c1&quot;&gt;//id(빈이름) , 클래스 이름 , 스코프 범위&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;jsp:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;student&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;javalec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;set,getProperty&lt;/h2&gt;
&lt;p&gt;java s/getter와 같은 역할&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;jsp:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setProperty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;student&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;홍길동&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;jsp:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getProperty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;student&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.ssitcenter.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.hanbit.co.kr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">빈 태그 Java언어의 데이터(속성)과 기능(메소드)로 이루어진 클래스 useBean setProperty getProperty useBean 특정 Bean을 사용한다고 명시 할떄 사용 //id(빈이름) , 클래스 이름 , 스코프 범위 &amp;lt;jsp:userBean id =&quot;student&quot; class=&quot;&quot;com.javalec.ex.Student scope=&quot;page&quot;/&amp;gt; set,getProperty java s/getter와 같은 역할 &amp;lt;jsp:setProperty name=&quot;student&quot; property=&quot;name&quot; value=&quot;홍길동&quot;/&amp;gt; &amp;lt;jsp:getProperty name=&quot;student&quot; property=&quot;name&quot;/&amp;gt; References. https://www.hanbit.co.kr/</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">exception</title>
      <link href="https://jaehong2.github.io//jsp-exception.html" rel="alternate" type="text/html" title="exception" />
      <published>2020-11-29T23:15:24+09:00</published>
      <updated>2020-11-29T23:15:24+09:00</updated>
      <id>https://jaehong2.github.io//jsp-exception.html</id>
      <content type="html" xml:base="https://jaehong2.github.io//jsp-exception.html">&lt;h1&gt;예외처리&lt;/h1&gt;

&lt;h2&gt;1.페이지 지시자를 통한 예외 처리&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;errorPage.jsp&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1. 해당페이지에서 에러가 발생할시 errorPage.jsp의 내용 출력&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isErrorPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;해당&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;는&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;받을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;수&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;있습니다&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;은&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;정상적인&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;페이지를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;말함&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;예외페이지&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;입니다&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;2.web.xml을 통한 예외 처리&lt;/h2&gt;
&lt;p&gt;web.xml&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error404&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.ssitcenter.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.hanbit.co.kr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">예외처리 1.페이지 지시자를 통한 예외 처리 &amp;lt;%@ page errorPage = &quot;errorPage.jsp&quot; %&amp;gt; //1. 해당페이지에서 에러가 발생할시 errorPage.jsp의 내용 출력 &amp;lt;%@ page isErrorPage = &quot;true&quot; %&amp;gt; &amp;lt;!-- 해당page는 error를 받을 수 있습니다.--&amp;gt; &amp;lt;% response.setStatus(200); %&amp;gt; &amp;lt;!-- 200은 정상적인 페이지를 말함--&amp;gt; &amp;lt;body&amp;gt; 예외페이지 입니다.&amp;lt;br/&amp;gt; &amp;lt;% exception.getMessage(); %&amp;gt; &amp;lt;/body&amp;gt; 2.web.xml을 통한 예외 처리 web.xml &amp;lt;error-page&amp;gt; &amp;lt;error-code&amp;gt;404&amp;lt;/error-code&amp;gt; &amp;lt;location&amp;gt;/error404.jsp&amp;lt;/location&amp;gt; &amp;lt;/error-page&amp;gt; &amp;lt;error-page&amp;gt; &amp;lt;error-code&amp;gt;500&amp;lt;/error-code&amp;gt; &amp;lt;location&amp;gt;/error500.jsp&amp;lt;/location&amp;gt; &amp;lt;/error-page&amp;gt; References. https://www.hanbit.co.kr/</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">cookie &amp;amp; session</title>
      <link href="https://jaehong2.github.io//jsp-cookie.html" rel="alternate" type="text/html" title="cookie &amp; session" />
      <published>2020-11-27T02:02:24+09:00</published>
      <updated>2020-11-27T02:02:24+09:00</updated>
      <id>https://jaehong2.github.io//jsp-cookie.html</id>
      <content type="html" xml:base="https://jaehong2.github.io//jsp-cookie.html">&lt;h1&gt;쿠키와 세션&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2&gt;쿠키&lt;/h2&gt;
&lt;p&gt;http 프로토콜의 특징은 웹브라우저에 응답 후 관계를 끊는 것이다.&lt;br /&gt;
    연결이 끊겼을 때 어떤 정보를 지속적으로 유지하기 위한 수단으로 쿠키를 사용한다.&lt;br /&gt;
    쿠키는 서버에서 생성하여, 생성된 쿠키는 서버가아닌 클라이언트 측에 저장 &lt;br /&gt;
    4kb로, 300개까지 데이터 정보를 가질 수 있다.
&lt;/p&gt;

&lt;h2&gt;쿠키 문법&lt;/h2&gt;
&lt;p&gt; 쿠키 생성 -&amp;gt; 속성 설정 -&amp;gt; response 객체에 쿠키 탑재&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Cookie&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cookie =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Cookie&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//쿠키&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMaxAge&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;초간&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;지속&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCookie&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//쿠키탑재&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendRedirect&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jsp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;포워딩&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--forwarding 후--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Cookie&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cookies =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;request.getCookies();&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;포워딩된&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;쿠키객체&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;i=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;++){&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cookies[i].getValue();&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong class=&quot;subtitle_fontAwesome&quot;&gt; 궁금한점 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;쿠키가 보안상으로 취약한 이유 &lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;세션&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;쿠키와 마찬가지로 서버와의 관계를 유지하기 위한 수단&lt;/li&gt;
    &lt;li&gt;서버상에 객체로 존재 (쿠키는 클라이언트 쪽에 존재)&lt;/li&gt;
    &lt;li&gt;세션은 서버에서만 접근이 가능 -&amp;gt; 보안이 좋다. , 데이터에 한계가 없다.&lt;/li&gt;

&lt;/ul&gt;

&lt;h2&gt;세션 문법&lt;/h2&gt;
&lt;p&gt;&lt;mark&gt;브라우저 하나당 하나의 객체를 jsp 컨테이너가 자동으로 생성한다.&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt; 클라이언트 요청 -&amp;gt; session 자동 생성 -&amp;gt; Session 내부 객체로 속성 설정&lt;/p&gt;

&lt;p&gt;login.html&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;action =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loginOk.jsp&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    아이디: &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
    비밀번호: &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pw&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;로그인&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;loginOk.jsp&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;%!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pw&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abcde&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12345&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendRedirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;welcome.jsp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendRedirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login.html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;welcome.jsp&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Enumeration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumeration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttributeNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enumeration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMoreElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumeration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abcde&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;님 안녕하세요.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;br/&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;logout.jsp&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Enumeration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumeration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttributeNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enumeration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasMoreElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enumeration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abcde&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.ssitcenter.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.hanbit.co.kr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">쿠키와 세션 쿠키 http 프로토콜의 특징은 웹브라우저에 응답 후 관계를 끊는 것이다. 연결이 끊겼을 때 어떤 정보를 지속적으로 유지하기 위한 수단으로 쿠키를 사용한다. 쿠키는 서버에서 생성하여, 생성된 쿠키는 서버가아닌 클라이언트 측에 저장 4kb로, 300개까지 데이터 정보를 가질 수 있다. 쿠키 문법 쿠키 생성 -&amp;gt; 속성 설정 -&amp;gt; response 객체에 쿠키 탑재 &amp;lt;% Cookie cookie = new Cookie(&quot;id&quot;,id); //쿠키 name, value cookie.setMaxAge(60); //60초간 지속 response.addCookie(cookie); //쿠키탑재 response.sendRedirect(&quot;abc.jsp&quot;) // 포워딩 %&amp;gt; &amp;lt;!--forwarding 후--&amp;gt; &amp;lt;% Cookie[] cookies = request.getCookies(); // 포워딩된 쿠키객체 for(int i=0; i &amp;lt; cookies.length; i++){ String id = cookies[i].getValue(); } 궁금한점 쿠키가 보안상으로 취약한 이유 세션 쿠키와 마찬가지로 서버와의 관계를 유지하기 위한 수단 서버상에 객체로 존재 (쿠키는 클라이언트 쪽에 존재) 세션은 서버에서만 접근이 가능 -&amp;gt; 보안이 좋다. , 데이터에 한계가 없다. 세션 문법 브라우저 하나당 하나의 객체를 jsp 컨테이너가 자동으로 생성한다. 클라이언트 요청 -&amp;gt; session 자동 생성 -&amp;gt; Session 내부 객체로 속성 설정 login.html &amp;lt;form action =&quot;loginOk.jsp&quot; method=&quot;post&quot;&amp;gt; 아이디: &amp;lt;input type=&quot;text&quot; name =&quot;id&quot; size=&quot;10&quot;&amp;gt;&amp;lt;br/&amp;gt; 비밀번호: &amp;lt;input type=&quot;password&quot; name =&quot;pw&quot; size=&quot;10&quot;&amp;gt;&amp;lt;br/&amp;gt; &amp;lt;input type=&quot;submit&quot; value=&quot;로그인&quot;&amp;gt; &amp;lt;/form&amp;gt; loginOk.jsp &amp;lt;%! String id,pw; %&amp;gt; &amp;lt;% id =request.getParameter(&quot;id&quot;); pw = request.getParameter(&quot;pw&quot;); if(id.equals(&quot;abcde&quot;)&amp;amp;&amp;amp; pw.equals(&quot;12345&quot;)){ session.setAttribute(&quot;id&quot;,id); response.sendRedirect(&quot;welcome.jsp&quot;); }else{ response.sendRedirect(&quot;login.html&quot;); } %&amp;gt; welcome.jsp &amp;lt;% Enumeration enumeration = session.getAttributeNames(); while(enumeration.hasMoreElements()){ String sName = enumeration.nextElement().toString(); String sValue = (String)session.getAttribute(sName); if(sValue.equals(&quot;abcde&quot;)){ out.println(sValue + &quot;님 안녕하세요.&quot; +&quot;&amp;lt;br/&amp;gt;&quot;); } } %&amp;gt; logout.jsp &amp;lt;% Enumeration enumeration = session.getAttributeNames(); while(enumeration.hasMoreElements()){ String sName = enumeration.nextElement().toString(); String sValue = (String)session.getAttribute(sName); if(sValue.equals(&quot;abcde&quot;)) session.removeAttribute(sName); } %&amp;gt; References. https://www.hanbit.co.kr/</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">action tag</title>
      <link href="https://jaehong2.github.io//jsp-action-tag.html" rel="alternate" type="text/html" title="action tag" />
      <published>2020-11-27T01:41:18+09:00</published>
      <updated>2020-11-27T01:41:18+09:00</updated>
      <id>https://jaehong2.github.io//jsp-action-tag.html</id>
      <content type="html" xml:base="https://jaehong2.github.io//jsp-action-tag.html">&lt;h2&gt;액션태그란?&lt;/h2&gt;

&lt;p&gt;JSP 페이지 내에서 동작을 지시하는 태그&lt;/p&gt;

&lt;h2&gt;forward&lt;/h2&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- main.jsp --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;jsp:foword&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sub.jsp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
    &lt;li&gt;url은 변경되지 않지만 내용은 forward한 .jsp파일을 따른다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2&gt;include&lt;/h2&gt;
&lt;p&gt;현재페이지에서 다른 페이지 삽입&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;jsp:include&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;include02.jsp&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;flush =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;param&lt;/h2&gt;
&lt;p&gt;forward 및 include 태그에 데이터 전달을 목적으로 사용되는 태그&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;jsp:foward&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sub.jsp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;jsp:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abcd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;jsp:param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pw&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;11&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/jsp:foward&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!---값을 받을때-----&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;request.getParameter(&quot;id&quot;);&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pw =&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;request.getParameter(&quot;pw&quot;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.ssitcenter.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.hanbit.co.kr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">액션태그란? JSP 페이지 내에서 동작을 지시하는 태그 forward &amp;lt;!-- main.jsp --&amp;gt; &amp;lt;jsp:foword page=&quot;sub.jsp&quot;/&amp;gt; url은 변경되지 않지만 내용은 forward한 .jsp파일을 따른다. include 현재페이지에서 다른 페이지 삽입 &amp;lt;jsp:include page = &quot;include02.jsp&quot; flush =&quot;true&quot;/&amp;gt; param forward 및 include 태그에 데이터 전달을 목적으로 사용되는 태그 &amp;lt;jsp:foward page=&quot;sub.jsp&quot;&amp;gt; &amp;lt;jsp:param name=&quot;id&quot; value =&quot;abcd&quot;/&amp;gt; &amp;lt;jsp:param name=&quot;pw&quot; value=&quot;11&quot;/&amp;gt; &amp;lt;/jsp:foward&amp;gt; &amp;lt;!---값을 받을때-----&amp;gt; &amp;lt;% id = request.getParameter(&quot;id&quot;); pw = request.getParameter(&quot;pw&quot;); %&amp;gt; References. https://www.hanbit.co.kr/</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">추상클래스와 인터페이스</title>
      <link href="https://jaehong2.github.io//java-abstract-interface" rel="alternate" type="text/html" title="추상클래스와 인터페이스" />
      <published>2020-11-21T20:46:00+09:00</published>
      <updated>2020-11-21T20:46:00+09:00</updated>
      <id>https://jaehong2.github.io//java-abstract-interface</id>
      <content type="html" xml:base="https://jaehong2.github.io//java-abstract-interface">&lt;h1&gt;추상클래스와 인터페이스&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2&gt;추상&lt;/h2&gt;
&lt;p&gt;실제들 간에 공통되는 특성을 추출&lt;br /&gt;
ex) 삼성 현대 기아회사&lt;/p&gt;
&lt;hr /&gt;

&lt;h2&gt;추상클래스&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;실제 클래스들의 공통되는 &lt;mark&gt;필드&lt;/mark&gt;, &lt;mark&gt;메소드&lt;/mark&gt;를 정의한 클래스&lt;/li&gt;
    &lt;li&gt;공통된 필드와 메소드 이름을 통일할 목적&lt;/li&gt;
    &lt;li&gt;부모 클래스로만 사용 되며 , 객체 생성 불가&lt;/li&gt;
    &lt;li&gt;추상 메서드는 자식 클래스에서 오버라이딩! &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2&gt;인터페이스&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;인터페이스란 .. 개발코드와 객체가 서로 통신 하는 접점이다.&lt;/li&gt;
    &lt;li&gt;개발 코드는 객체의 내부구조를 몰라도 인터페이스의 메소드만 알고있으면된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;인터페이스 역할&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;개발 코드가 객체에 종속되지 않게 하여 객체를 교체 할 수 있도록 함.&lt;/li&gt;
    &lt;li&gt;개발 코드 변경없이 리턴 값 또는 실행 내용이 다양해 질수있다.(다형성)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;인터페이스 구성멤버&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;상수, 추상메소드&lt;/li&gt;
    &lt;li&gt;Java 8 부터는 default 메소드, 정적 메소드&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2&gt;상수 필드 선언&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;인터페이스는 상수 필드만 선언가능&lt;/li&gt;
    &lt;li&gt;인터페이스에 선언된 모든 필드는 public static final(상수)의 특징을 가짐 &lt;/li&gt;
    &lt;li&gt;상수명은 대문자&lt;/li&gt;
    &lt;li&gt;선언과 동시에 초기화 (static 블록을 작성할수없으므로}&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;추상 메소드 선언&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;인터페이스의 메소드는 기본적으로 실행 블록이 없는 &lt;mark&gt;추상 메소드&lt;/mark&gt;로 선언한다.&lt;/li&gt;
    &lt;li&gt;public abstract를 생략하더라도 컴파일 과정에서 자동적으로 붙음&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RemoteControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_VOLUME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIN_VOLUME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;turnOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;turnOff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//public abstract 생략&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setVolume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//public abstract 생략&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2&gt;디폴트 메소드 선언&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;자바 8 에서 추가된 인터페이스의 새로운 멤버&lt;/li&gt;
    &lt;li&gt;[public]이 기본타입으로 default를 붙어야 생성된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RemoteControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setMute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;무음 처리&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;무음 해제&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;정적 메소드 선언&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RemoteControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;emptyBattery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;배터리가 다 소모 되었습니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- 출처 --&gt;
&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.hanbit.co.kr/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.hanbit.co.kr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">추상클래스와 인터페이스 추상 실제들 간에 공통되는 특성을 추출 ex) 삼성 현대 기아회사 추상클래스 실제 클래스들의 공통되는 필드, 메소드를 정의한 클래스 공통된 필드와 메소드 이름을 통일할 목적 부모 클래스로만 사용 되며 , 객체 생성 불가 추상 메서드는 자식 클래스에서 오버라이딩! 인터페이스 인터페이스란 .. 개발코드와 객체가 서로 통신 하는 접점이다. 개발 코드는 객체의 내부구조를 몰라도 인터페이스의 메소드만 알고있으면된다. 인터페이스 역할 개발 코드가 객체에 종속되지 않게 하여 객체를 교체 할 수 있도록 함. 개발 코드 변경없이 리턴 값 또는 실행 내용이 다양해 질수있다.(다형성) 인터페이스 구성멤버 상수, 추상메소드 Java 8 부터는 default 메소드, 정적 메소드 상수 필드 선언 인터페이스는 상수 필드만 선언가능 인터페이스에 선언된 모든 필드는 public static final(상수)의 특징을 가짐 상수명은 대문자 선언과 동시에 초기화 (static 블록을 작성할수없으므로} 추상 메소드 선언 인터페이스의 메소드는 기본적으로 실행 블록이 없는 추상 메소드로 선언한다. public abstract를 생략하더라도 컴파일 과정에서 자동적으로 붙음 public interface RemoteControl{ int MAX_VOLUME = 10; int MIN_VOLUME =0; public abstract void turnOn(); void turnOff(); //public abstract 생략 void setVolume(int volume); //public abstract 생략 } 디폴트 메소드 선언 자바 8 에서 추가된 인터페이스의 새로운 멤버 [public]이 기본타입으로 default를 붙어야 생성된다. public interface RemoteControl{ default void setMute(boolean mute){ if(mute){ System.out.println(&quot;무음 처리&quot;); }else{ System.out.println(&quot;무음 해제&quot;); } } 정적 메소드 선언 public interface RemoteControl{ static void emptyBattery(){ System.out.println(&quot;배터리가 다 소모 되었습니다.&quot;); } } References. https://www.hanbit.co.kr/</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Servelt 3</title>
      <link href="https://jaehong2.github.io//jsp-servlet-3.html" rel="alternate" type="text/html" title="Servelt 3" />
      <published>2020-11-18T09:41:18+09:00</published>
      <updated>2020-11-18T09:41:18+09:00</updated>
      <id>https://jaehong2.github.io//jsp-servlet-3.html</id>
      <content type="html" xml:base="https://jaehong2.github.io//jsp-servlet-3.html">&lt;h2&gt;Servlet 초기화 파라미터 : ServletConfig&lt;/h2&gt;
&lt;p&gt;&lt;mark&gt;특정&lt;/mark&gt; Servlet 생성될 때 초기에 필요한 데이터들이 있다. ex)특정 경로 및 아이디 등..&lt;br /&gt;
    이러한 데이터들을 초기화 파라미터라고 함
&lt;/p&gt;

&lt;h2&gt;1. web.xml 사용해서 초기화&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/jsp/jsp.7.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;2. Servlet 파일 사용해서 초기화&lt;/h2&gt;
&lt;p&gt;해당 Servlet에 @WebInitParam 사용해서 초기화&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/jsp/jsp.8.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;ServletContext&lt;/h2&gt;
&lt;p&gt; &lt;mark&gt;모든 서블릿에 &lt;/mark&gt; 데이터를 공유 할 시 (web.xml에 기술)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/jsp/jsp.9.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;웹어플리케이션 생명주기 감시 : ServletContextListner &lt;/h2&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;xml 파일을 통해 Lisner 지정하거나 or 리스너클래스에 어노테이션 사용하거나&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/jsp/jsp.10.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;순서&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/jsp/jsp.11.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.ssitcenter.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.hanbit.co.kr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">Servlet 초기화 파라미터 : ServletConfig 특정 Servlet 생성될 때 초기에 필요한 데이터들이 있다. ex)특정 경로 및 아이디 등.. 이러한 데이터들을 초기화 파라미터라고 함 1. web.xml 사용해서 초기화 2. Servlet 파일 사용해서 초기화 해당 Servlet에 @WebInitParam 사용해서 초기화 ServletContext 모든 서블릿에 데이터를 공유 할 시 (web.xml에 기술) 웹어플리케이션 생명주기 감시 : ServletContextListner xml 파일을 통해 Lisner 지정하거나 or 리스너클래스에 어노테이션 사용하거나 순서 References. https://www.hanbit.co.kr/</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Servelt 2</title>
      <link href="https://jaehong2.github.io//jsp-servlet-2.html" rel="alternate" type="text/html" title="Servelt 2" />
      <published>2020-11-17T12:03:18+09:00</published>
      <updated>2020-11-17T12:03:18+09:00</updated>
      <id>https://jaehong2.github.io//jsp-servlet-2.html</id>
      <content type="html" xml:base="https://jaehong2.github.io//jsp-servlet-2.html">&lt;h2&gt;Servlet 작동순서&lt;/h2&gt;
&lt;p&gt;클라이언트에서 servlet 요청이 들어오면 서버는 &lt;br /&gt;
    servlet 컨테이너를 만들고, 요청이 있을때 마다 스레드가 생성&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/jsp/jsp.3.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Servlet 라이프 사이클(생명주기)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/jsp/jsp.4.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;한번생성된 객체는 재사용 -&amp;gt; 요청이 필요할때마다 객체를 생성하는게 아니라서 속도빠름&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;@PostConstruct 선처리: 객체생성과 init()호출사이의 단계에서 메소드 실행&lt;/h4&gt;
&lt;h4&gt;@PreDestroy 후처리: destroy() 호출 후에 메소드 실행&lt;/h4&gt;

&lt;hr /&gt;

&lt;h2&gt;HTML form 태그&lt;/h2&gt;
&lt;p&gt;Form 태그의 submit 버튼을 클릭하여 데이터를 서버로 전송하면, &lt;br /&gt;
&lt;mark&gt;해당파일(Servlet)에서는 HttpRequest 객체를 이용하여 Parameter 값을 얻을 수 있다.&lt;/mark&gt;&lt;/p&gt;

&lt;h2&gt;form 태그에서 Servlet 까지 흐름도&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/jsp/jsp.5.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;한글처리 방식&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/jsp/jsp.6.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.ssitcenter.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.hanbit.co.kr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">Servlet 작동순서 클라이언트에서 servlet 요청이 들어오면 서버는 servlet 컨테이너를 만들고, 요청이 있을때 마다 스레드가 생성 Servlet 라이프 사이클(생명주기) 한번생성된 객체는 재사용 -&amp;gt; 요청이 필요할때마다 객체를 생성하는게 아니라서 속도빠름 @PostConstruct 선처리: 객체생성과 init()호출사이의 단계에서 메소드 실행 @PreDestroy 후처리: destroy() 호출 후에 메소드 실행 HTML form 태그 Form 태그의 submit 버튼을 클릭하여 데이터를 서버로 전송하면, 해당파일(Servlet)에서는 HttpRequest 객체를 이용하여 Parameter 값을 얻을 수 있다. form 태그에서 Servlet 까지 흐름도 한글처리 방식 References. https://www.hanbit.co.kr/</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Servelt 1</title>
      <link href="https://jaehong2.github.io//jsp-servlet-1.html" rel="alternate" type="text/html" title="Servelt 1" />
      <published>2020-11-17T04:33:00+09:00</published>
      <updated>2020-11-17T04:33:00+09:00</updated>
      <id>https://jaehong2.github.io//jsp-servlet-1.html</id>
      <content type="html" xml:base="https://jaehong2.github.io//jsp-servlet-1.html">&lt;h2&gt;Servlet&lt;/h2&gt;

&lt;p&gt;&lt;mark&gt;Servlet 클래스는 HttpServlet 클래스를 상속받음&lt;/mark&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;요청처리 및 응답처리객체를 톰캣에서 받음&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//request 요청처리객체, response 응답처리 객체&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//응답 처리시 html로&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;GET &amp;amp;P POST방식&lt;/h2&gt;

&lt;p&gt;클라이언트에서 WAS로 &lt;mark&gt;요청(request)&lt;/mark&gt;하는 2가지 방법
html 태그안에 method = GET or POST 정함&lt;/p&gt;
&lt;p&gt;&lt;b&gt;1.GET 방식&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;서블릿에서 doGet 메소드 호출&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;URL값으로 정보가 전송되어 보안취약&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;2.POST 방식&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;서블릿에서 doPost 메소드 호출&lt;/li&gt;
    &lt;li&gt;&lt;b&gt;header를 이용하여 정보가 전송되어 보안강함&lt;/b&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;&lt;strong class=&quot;subtitle_fontAwesome&quot;&gt; 깨달은것 &lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
response.setContentType(&quot;text/html&quot;); 이부분을 잘못입력하면
&lt;br /&gt;
response.setContentType(&quot;html/text&quot;); 이렇게입력시
 실행시키면 웹페이지가 안뜨고 파일을 다운로드 받을 수도있다.
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2&gt;Context Path&lt;/h2&gt;
&lt;p&gt;WAS에서 웹어플리케이션을 구분하기 위한 path&lt;br /&gt;
   이클립스에서 프로젝트생성시  &lt;mark&gt;자동으로 server.xml&lt;/mark&gt;에 추가 &lt;/p&gt;

&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.ssitcenter.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.hanbit.co.kr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">Servlet Servlet 클래스는 HttpServlet 클래스를 상속받음 public class HelloWorld extends HttpServlet{ } 요청처리 및 응답처리객체를 톰캣에서 받음 protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { //request 요청처리객체, response 응답처리 객체 response.setContentType(&quot;text/html&quot;); //응답 처리시 html로 PrintWriter writer = response.getWriter(); GET &amp;amp;P POST방식 클라이언트에서 WAS로 요청(request)하는 2가지 방법 html 태그안에 method = GET or POST 정함 1.GET 방식 서블릿에서 doGet 메소드 호출 URL값으로 정보가 전송되어 보안취약 2.POST 방식 서블릿에서 doPost 메소드 호출 header를 이용하여 정보가 전송되어 보안강함 깨달은것 response.setContentType(&quot;text/html&quot;); 이부분을 잘못입력하면 response.setContentType(&quot;html/text&quot;); 이렇게입력시 실행시키면 웹페이지가 안뜨고 파일을 다운로드 받을 수도있다. Context Path WAS에서 웹어플리케이션을 구분하기 위한 path 이클립스에서 프로젝트생성시 자동으로 server.xml에 추가 References. https://www.hanbit.co.kr/</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">jsp 입문</title>
      <link href="https://jaehong2.github.io//jsp-introduce.html" rel="alternate" type="text/html" title="jsp 입문" />
      <published>2020-11-16T18:33:00+09:00</published>
      <updated>2020-11-16T18:33:00+09:00</updated>
      <id>https://jaehong2.github.io//jsp-introduce.html</id>
      <content type="html" xml:base="https://jaehong2.github.io//jsp-introduce.html">&lt;h1&gt;JSP&lt;/h1&gt;

&lt;hr /&gt;

&lt;ul&gt;
    &lt;li&gt;프로토콜 : 네트워크상에서 약속한 통신 규약 &lt;/li&gt;
    &lt;li&gt;(Http:웹 통신규약, FTP: 서버에 파일 올리거나 받을때 , SMTP,POP: 메일 DHCP: 가정에서 사용하는 동적 사설 인터넷)&lt;/li&gt;
    &lt;li&gt;IP: 네트워크 상에서 컴퓨터를 식별할수있는 주소 &lt;/li&gt;
    &lt;li&gt;DNS: IP주소를 인간이 쉽게 외우도록 맵핑한 문자열 &lt;/li&gt;
    &lt;li&gt;Port: 해당 컴퓨터의 구동되고있는 프로그램을 구분할 수 있는 번호 (default로 80)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Java 웹&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/built/images/jsp/jsp.1.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;JSP(java Server Page): HTML 파일 내에 JAVA언어를 삽입한 문서&lt;/li&gt;
    &lt;li&gt;Servlet(Server Applet) JAVA언어로 이루어진 웹프로그래밍 문서&lt;/li&gt;
    &lt;li&gt;컴포넌트: JSP, Servlet, HTML 등의 웹 어플리케이션을 구현하기 위한 구성요소&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2&gt;Jsp 아키텍쳐&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/built/images/jsp/jsp.2.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Servlet 특징&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;동적 웹어플리케이션 컴포넌트&lt;/li&gt;
    &lt;li&gt;.java 확장자&lt;/li&gt;
    &lt;li&gt;java thread 이용하여 동작&lt;/li&gt;
    &lt;li&gt;MVC패턴에서 Controller&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2&gt;맵핑 방법&lt;/h2&gt;
&lt;h3&gt;왜 맵핑을하는가?(Why) :너무 길고, 보안에 노출될수 있기에..&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;기존경로: http://localhost:8090/hello/servelt/com.javalec.ex.Helloworld&lt;/li&gt;
    &lt;li&gt;URL맵핑시: http://localhost:8090/hello/HWrold&lt;/li&gt;
    &lt;li&gt;MVC패턴에서 Controller&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;1. web.xml 이용하는방법&lt;/mark&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloworld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;javalec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helloworld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
    &lt;li&gt;servlet-name : 임의의 이름을 만듬&lt;/li&gt;
    &lt;li&gt;servlet-class : 매핑할 클래스 파일명을 패키지명을 포함하여 입력&lt;/li&gt;
    &lt;li&gt;url-parttern: servlet-class의 매핑할 임의의 이름입력. 반드시 &lt;mark&gt;/&lt;/mark&gt;로시작해야됨!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;mark&gt;2. java code의 어노테이션 이용&lt;/mark&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@WebServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/HWorld!!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// servlet 상단에 선언&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong class=&quot;subtitle_fontAwesome&quot;&gt; web.xml과 어노테이션 동시사용시 web.xml이 적용된다.  &lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.ssitcenter.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.hanbit.co.kr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">JSP 프로토콜 : 네트워크상에서 약속한 통신 규약 (Http:웹 통신규약, FTP: 서버에 파일 올리거나 받을때 , SMTP,POP: 메일 DHCP: 가정에서 사용하는 동적 사설 인터넷) IP: 네트워크 상에서 컴퓨터를 식별할수있는 주소 DNS: IP주소를 인간이 쉽게 외우도록 맵핑한 문자열 Port: 해당 컴퓨터의 구동되고있는 프로그램을 구분할 수 있는 번호 (default로 80) Java 웹 JSP(java Server Page): HTML 파일 내에 JAVA언어를 삽입한 문서 Servlet(Server Applet) JAVA언어로 이루어진 웹프로그래밍 문서 컴포넌트: JSP, Servlet, HTML 등의 웹 어플리케이션을 구현하기 위한 구성요소 Jsp 아키텍쳐 Servlet 특징 동적 웹어플리케이션 컴포넌트 .java 확장자 java thread 이용하여 동작 MVC패턴에서 Controller 맵핑 방법 왜 맵핑을하는가?(Why) :너무 길고, 보안에 노출될수 있기에.. 기존경로: http://localhost:8090/hello/servelt/com.javalec.ex.Helloworld URL맵핑시: http://localhost:8090/hello/HWrold MVC패턴에서 Controller 1. web.xml 이용하는방법 &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;helloworld&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;com.javalec.ex.HelloWorld&amp;lt;/servlet-class&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;helloworld&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/hw&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; servlet-name : 임의의 이름을 만듬 servlet-class : 매핑할 클래스 파일명을 패키지명을 포함하여 입력 url-parttern: servlet-class의 매핑할 임의의 이름입력. 반드시 /로시작해야됨! 2. java code의 어노테이션 이용 @WebServlet(&quot;/HWorld!!&quot;)// servlet 상단에 선언 web.xml과 어노테이션 동시사용시 web.xml이 적용된다. References. https://www.hanbit.co.kr/</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">상속</title>
      <link href="https://jaehong2.github.io//java-inheritance" rel="alternate" type="text/html" title="상속" />
      <published>2020-11-13T13:45:00+09:00</published>
      <updated>2020-11-13T13:45:00+09:00</updated>
      <id>https://jaehong2.github.io//java-inheritance</id>
      <content type="html" xml:base="https://jaehong2.github.io//java-inheritance">&lt;h1&gt;상속(Inheritance)&lt;/h1&gt;
&lt;p&gt;
&lt;blockquote&gt;
    &lt;ul&gt;
        &lt;li&gt;자식(하위) 클래스가 부모(상위) 클래스의 멤버를 물려받는 것&lt;/li&gt;
        &lt;li&gt;상속 대상 : 부모의 필드 &amp;amp; 메소드&lt;/li&gt;
        &lt;li&gt;개발 시간 단축, 객체의 다형성 구현, 코드의 중복성 다운, 유지보수 등 이점!!&lt;/li&gt;
    &lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/p&gt;

&lt;h2&gt;상속 대상의 제한&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;부모클래스의 &lt;b&gt;private&lt;/b&gt; 접근 제한을 가지는 필드와 메소드는 제외&lt;/li&gt;
    &lt;li&gt;부모클래스가 &lt;b&gt;다른 패키지에 있을때&lt;/b&gt; default 접근 제한을 가지는 필드와 메소드는 제외&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2&gt;extends 키워드&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;부모클래스를 상속받기위한 키워드&lt;/li&gt;
    &lt;li&gt;자바는 &lt;mark&gt;다중상속을 허락하지 않아&lt;/mark&gt; 한클래스에 하나만 상속가능&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2&gt;자식 객체를 생성하면 부모 객체도 생성될까?&lt;/h2&gt;
&lt;p&gt;&lt;strong class=&quot;subtitle_fontAwesome&quot;&gt;정답은 생성된다!!&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;자식 객체 생성시 부모 객체부터 생성되고 자식 객체가 생성된다.&lt;/li&gt;
    &lt;li&gt;부모 &lt;mark&gt;생성자&lt;/mark&gt;가 호출이 완료되고 자식 &lt;mark&gt;생성자&lt;/mark&gt;가 나중에 호출 완료된다.&lt;/li&gt;
    &lt;li&gt;자식 생성자가 부모생성자를 호출 하지 않아도 컴파일러가 자동적으로 super()를 통해 부모의 기본생성자를 호출 &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2&gt;부모 생성자 호출 super()&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;super(매개값)은 매개값과 동일한 타입, 개수, 순서가 맞는 부모 생성자 호출&lt;/li&gt;
    &lt;li&gt;부모 클래스에 기본생성자가 없다면 필수적으로 부모클래스에 맞는(매개변수) 생성자를 작성해야된다.&lt;/li&gt;
    &lt;li&gt;반드시 자식생성자 첫 줄에 위치 해야된다.&lt;/li&gt;
    &lt;li&gt;자식 생성자를 호출해서 자식객체를 생성시 부모 객체의 생성자 부터 호출한다.!!&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;studentNo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;studentNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jaehong&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;93-12-23&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//컴파일오류.. 이유: 생성자의 첫줄에서 선언해주어야함!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2&gt;Override 매소드 재정의&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
    &lt;li&gt;부모 클래스의 메소드를 자식 클래스에서 재정의 하는 것을 말한다.&lt;/li&gt;
    &lt;li&gt;접근 제한을 더 강하게 오버로딩 할 수 없다. ex) public -&amp;gt; private, default &lt;b&gt;(X)&lt;/b&gt; 반대로는 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2&gt;@Override 어노테이션 &lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;컴파일러에게 부모 클래스의 메소드와 선언부와 동일한지 검사하도록 지시&lt;/li&gt;
    &lt;li&gt;접근 제한을 더 강하게 오버로딩 할 수 없다. ex) public -&amp;gt; private, default &lt;b&gt;(X)&lt;/b&gt; 반대로는 가능&lt;/li&gt;
    &lt;li&gt;super.부모메소드() : 부모메소드 호출방법&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2&gt;다형성(Ployorphism)&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;같은 타입이지만 실행결과가 다양한 객체를 대입할수있는 성질을 말한다.&lt;/li&gt;
    &lt;li&gt;A a = new B() //b는 부모객체 A클래스를 상속 받고있는 상태&lt;/li&gt;
    &lt;li&gt;자식 타입은 부모타입으로 자동 타입 변환된다.&lt;/li&gt;
    &lt;li&gt;객체를 부품화시킨다.! (타이어 예시 생각!)&lt;/li&gt;
    &lt;li&gt;&lt;mark&gt;부모 클래스 변수 = 자식클래스타입&lt;/mark&gt; 부모 클래스 변수는 자식과 같은 주소를 가진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;자동 타입 변환 이후 효과&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;부모 클래스에 선언된 필드와 메소드만 접근 가능&lt;/li&gt;
    &lt;li&gt;자식 클래스의 재정이된 메소드가 호출된다. (다형성관련)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1번 !!!!!!!!!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;////////////////////&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){..}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//Overrideing // 2번 !!!!!!!!!&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChildEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Parent로 자동 타입 변환&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 부모타입으로 형변환이 됬지만 1번이 아닌 오버라이딩된 2번이 실행된다!! 중요&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 호출불가능&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h2&gt;자식 타입인지 확인후 강제 타입&lt;/h2&gt;
&lt;p&gt;&lt;mark&gt;instanceof&lt;/mark&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//매개변수로 들어오는 객체가 Child 인지확인&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;!-- 출처 --&gt;
&lt;h1&gt;References.&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.hanbit.co.kr/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.hanbit.co.kr/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jaehong</name>
        
        
      </author>

      

      
        <category term="java" />
      

      
        <summary type="html">상속(Inheritance) 자식(하위) 클래스가 부모(상위) 클래스의 멤버를 물려받는 것 상속 대상 : 부모의 필드 &amp;amp; 메소드 개발 시간 단축, 객체의 다형성 구현, 코드의 중복성 다운, 유지보수 등 이점!! 상속 대상의 제한 부모클래스의 private 접근 제한을 가지는 필드와 메소드는 제외 부모클래스가 다른 패키지에 있을때 default 접근 제한을 가지는 필드와 메소드는 제외 extends 키워드 부모클래스를 상속받기위한 키워드 자바는 다중상속을 허락하지 않아 한클래스에 하나만 상속가능 자식 객체를 생성하면 부모 객체도 생성될까? 정답은 생성된다!! 자식 객체 생성시 부모 객체부터 생성되고 자식 객체가 생성된다. 부모 생성자가 호출이 완료되고 자식 생성자가 나중에 호출 완료된다. 자식 생성자가 부모생성자를 호출 하지 않아도 컴파일러가 자동적으로 super()를 통해 부모의 기본생성자를 호출 부모 생성자 호출 super() super(매개값)은 매개값과 동일한 타입, 개수, 순서가 맞는 부모 생성자 호출 부모 클래스에 기본생성자가 없다면 필수적으로 부모클래스에 맞는(매개변수) 생성자를 작성해야된다. 반드시 자식생성자 첫 줄에 위치 해야된다. 자식 생성자를 호출해서 자식객체를 생성시 부모 객체의 생성자 부터 호출한다.!! public Student(String name, String ssn, int studentNo) { this.studentNo =studentNo; super(&quot;jaehong&quot;,&quot;93-12-23&quot;); //컴파일오류.. 이유: 생성자의 첫줄에서 선언해주어야함! } Override 매소드 재정의 부모 클래스의 메소드를 자식 클래스에서 재정의 하는 것을 말한다. 접근 제한을 더 강하게 오버로딩 할 수 없다. ex) public -&amp;gt; private, default (X) 반대로는 가능 @Override 어노테이션 컴파일러에게 부모 클래스의 메소드와 선언부와 동일한지 검사하도록 지시 접근 제한을 더 강하게 오버로딩 할 수 없다. ex) public -&amp;gt; private, default (X) 반대로는 가능 super.부모메소드() : 부모메소드 호출방법 다형성(Ployorphism) 같은 타입이지만 실행결과가 다양한 객체를 대입할수있는 성질을 말한다. A a = new B() //b는 부모객체 A클래스를 상속 받고있는 상태 자식 타입은 부모타입으로 자동 타입 변환된다. 객체를 부품화시킨다.! (타이어 예시 생각!) 부모 클래스 변수 = 자식클래스타입 부모 클래스 변수는 자식과 같은 주소를 가진다. 자동 타입 변환 이후 효과 부모 클래스에 선언된 필드와 메소드만 접근 가능 자식 클래스의 재정이된 메소드가 호출된다. (다형성관련) class Parent{ void method1(){}; void method2(){}; // 1번 !!!!!!!!! } //////////////////// class Child extends Parent{ void method2(){..}//Overrideing // 2번 !!!!!!!!! void method3(){} } class ChildEx{ public static void main(String args[]){ Child child = new Child(); Parent parent = child; //Parent로 자동 타입 변환 parent.method1(); parent.method2(); // 부모타입으로 형변환이 됬지만 1번이 아닌 오버라이딩된 2번이 실행된다!! 중요 parent.method3(); // 호출불가능 } } 자식 타입인지 확인후 강제 타입 instanceof public void method(Parent parent) { if (parent instanceof Child) { //매개변수로 들어오는 객체가 Child 인지확인 Child Child = (Child) parent; } } References. https://www.hanbit.co.kr/</summary>
      

      
      
    </entry>
  
</feed>
